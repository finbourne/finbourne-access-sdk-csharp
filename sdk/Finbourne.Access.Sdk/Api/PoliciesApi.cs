/* 
 * FINBOURNE Access Management API
 *
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1085
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Finbourne.Access.Sdk.Client;
using Finbourne.Access.Sdk.Model;

namespace Finbourne.Access.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EARLY ACCESS] Create Policy
        /// </summary>
        /// <remarks>
        /// Creates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse CreatePolicy (PolicyCreationRequest policyCreationRequest);

        /// <summary>
        /// [EARLY ACCESS] Create Policy
        /// </summary>
        /// <remarks>
        /// Creates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> CreatePolicyWithHttpInfo (PolicyCreationRequest policyCreationRequest);
        /// <summary>
        /// [EARLY ACCESS] Create PolicyCollection
        /// </summary>
        /// <remarks>
        /// Creates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <returns>PolicyCollectionResponse</returns>
        PolicyCollectionResponse CreatePolicyCollection (PolicyCollectionCreationRequest policyCollectionCreationRequest);

        /// <summary>
        /// [EARLY ACCESS] Create PolicyCollection
        /// </summary>
        /// <remarks>
        /// Creates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        ApiResponse<PolicyCollectionResponse> CreatePolicyCollectionWithHttpInfo (PolicyCollectionCreationRequest policyCollectionCreationRequest);
        /// <summary>
        /// [EARLY ACCESS] Delete Policy
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns></returns>
        void DeletePolicy (string code, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Delete Policy
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyWithHttpInfo (string code, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Delete PolicyCollection
        /// </summary>
        /// <remarks>
        /// Deletes an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns></returns>
        void DeletePolicyCollection (string code, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Delete PolicyCollection
        /// </summary>
        /// <remarks>
        /// Deletes an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyCollectionWithHttpInfo (string code, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Run one or more evaluations
        /// </summary>
        /// <remarks>
        /// Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="asAt">Optional. The requested AsAt date of the entitlements (optional)</param>
        /// <returns>Dictionary&lt;string, EvaluationResponse&gt;</returns>
        Dictionary<string, EvaluationResponse> Evaluate (Dictionary<string, EvaluationRequest> requestBody, List<string> applications = null, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EARLY ACCESS] Run one or more evaluations
        /// </summary>
        /// <remarks>
        /// Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="asAt">Optional. The requested AsAt date of the entitlements (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, EvaluationResponse&gt;</returns>
        ApiResponse<Dictionary<string, EvaluationResponse>> EvaluateWithHttpInfo (Dictionary<string, EvaluationRequest> requestBody, List<string> applications = null, DateTimeOffset? asAt = null);
        /// <summary>
        /// Get policies of requesting user
        /// </summary>
        /// <remarks>
        /// Gets all Policies for the current user
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ICollection&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        ICollection<AttachedPolicyDefinitionResponse> GetOwnPolicies (List<string> applications = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// Get policies of requesting user
        /// </summary>
        /// <remarks>
        /// Gets all Policies for the current user
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        ApiResponse<ICollection<AttachedPolicyDefinitionResponse>> GetOwnPoliciesWithHttpInfo (List<string> applications = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [EARLY ACCESS] Get Policy
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse GetPolicy (string code, DateTimeOffset? asAt = null, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Get Policy
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> GetPolicyWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Get PolicyCollection
        /// </summary>
        /// <remarks>
        /// Gets an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>PolicyCollectionResponse</returns>
        PolicyCollectionResponse GetPolicyCollection (string code, DateTimeOffset? asAt = null, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Get PolicyCollection
        /// </summary>
        /// <remarks>
        /// Gets an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        ApiResponse<PolicyCollectionResponse> GetPolicyCollectionWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] List Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ICollection&lt;PolicyResponse&gt;</returns>
        ICollection<PolicyResponse> ListPolicies (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [EARLY ACCESS] List Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PolicyResponse&gt;</returns>
        ApiResponse<ICollection<PolicyResponse>> ListPoliciesWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [EARLY ACCESS] List PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ICollection&lt;PolicyCollectionResponse&gt;</returns>
        ICollection<PolicyCollectionResponse> ListPolicyCollections (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [EARLY ACCESS] List PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PolicyCollectionResponse&gt;</returns>
        ApiResponse<ICollection<PolicyCollectionResponse>> ListPolicyCollectionsWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [EARLY ACCESS] Update Policy
        /// </summary>
        /// <remarks>
        /// Updates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse UpdatePolicy (string code, PolicyUpdateRequest policyUpdateRequest, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Update Policy
        /// </summary>
        /// <remarks>
        /// Updates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> UpdatePolicyWithHttpInfo (string code, PolicyUpdateRequest policyUpdateRequest, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Update PolicyCollection
        /// </summary>
        /// <remarks>
        /// Updates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>PolicyCollectionResponse</returns>
        PolicyCollectionResponse UpdatePolicyCollection (string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Update PolicyCollection
        /// </summary>
        /// <remarks>
        /// Updates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        ApiResponse<PolicyCollectionResponse> UpdatePolicyCollectionWithHttpInfo (string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string scope = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EARLY ACCESS] Create Policy
        /// </summary>
        /// <remarks>
        /// Creates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync (PolicyCreationRequest policyCreationRequest);

        /// <summary>
        /// [EARLY ACCESS] Create Policy
        /// </summary>
        /// <remarks>
        /// Creates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreatePolicyAsyncWithHttpInfo (PolicyCreationRequest policyCreationRequest);
        /// <summary>
        /// [EARLY ACCESS] Create PolicyCollection
        /// </summary>
        /// <remarks>
        /// Creates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<PolicyCollectionResponse> CreatePolicyCollectionAsync (PolicyCollectionCreationRequest policyCollectionCreationRequest);

        /// <summary>
        /// [EARLY ACCESS] Create PolicyCollection
        /// </summary>
        /// <remarks>
        /// Creates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> CreatePolicyCollectionAsyncWithHttpInfo (PolicyCollectionCreationRequest policyCollectionCreationRequest);
        /// <summary>
        /// [EARLY ACCESS] Delete Policy
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyAsync (string code, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Delete Policy
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyAsyncWithHttpInfo (string code, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Delete PolicyCollection
        /// </summary>
        /// <remarks>
        /// Deletes an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyCollectionAsync (string code, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Delete PolicyCollection
        /// </summary>
        /// <remarks>
        /// Deletes an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyCollectionAsyncWithHttpInfo (string code, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Run one or more evaluations
        /// </summary>
        /// <remarks>
        /// Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="asAt">Optional. The requested AsAt date of the entitlements (optional)</param>
        /// <returns>Task of Dictionary&lt;string, EvaluationResponse&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, EvaluationResponse>> EvaluateAsync (Dictionary<string, EvaluationRequest> requestBody, List<string> applications = null, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EARLY ACCESS] Run one or more evaluations
        /// </summary>
        /// <remarks>
        /// Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="asAt">Optional. The requested AsAt date of the entitlements (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, EvaluationResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, EvaluationResponse>>> EvaluateAsyncWithHttpInfo (Dictionary<string, EvaluationRequest> requestBody, List<string> applications = null, DateTimeOffset? asAt = null);
        /// <summary>
        /// Get policies of requesting user
        /// </summary>
        /// <remarks>
        /// Gets all Policies for the current user
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ICollection&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        System.Threading.Tasks.Task<ICollection<AttachedPolicyDefinitionResponse>> GetOwnPoliciesAsync (List<string> applications = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// Get policies of requesting user
        /// </summary>
        /// <remarks>
        /// Gets all Policies for the current user
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;AttachedPolicyDefinitionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<AttachedPolicyDefinitionResponse>>> GetOwnPoliciesAsyncWithHttpInfo (List<string> applications = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [EARLY ACCESS] Get Policy
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync (string code, DateTimeOffset? asAt = null, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Get Policy
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> GetPolicyAsyncWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Get PolicyCollection
        /// </summary>
        /// <remarks>
        /// Gets an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<PolicyCollectionResponse> GetPolicyCollectionAsync (string code, DateTimeOffset? asAt = null, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Get PolicyCollection
        /// </summary>
        /// <remarks>
        /// Gets an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> GetPolicyCollectionAsyncWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] List Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ICollection&lt;PolicyResponse&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PolicyResponse>> ListPoliciesAsync (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [EARLY ACCESS] List Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PolicyResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PolicyResponse>>> ListPoliciesAsyncWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [EARLY ACCESS] List PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ICollection&lt;PolicyCollectionResponse&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PolicyCollectionResponse>> ListPolicyCollectionsAsync (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [EARLY ACCESS] List PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PolicyCollectionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PolicyCollectionResponse>>> ListPolicyCollectionsAsyncWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [EARLY ACCESS] Update Policy
        /// </summary>
        /// <remarks>
        /// Updates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync (string code, PolicyUpdateRequest policyUpdateRequest, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Update Policy
        /// </summary>
        /// <remarks>
        /// Updates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> UpdatePolicyAsyncWithHttpInfo (string code, PolicyUpdateRequest policyUpdateRequest, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Update PolicyCollection
        /// </summary>
        /// <remarks>
        /// Updates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<PolicyCollectionResponse> UpdatePolicyCollectionAsync (string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Update PolicyCollection
        /// </summary>
        /// <remarks>
        /// Updates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> UpdatePolicyCollectionAsyncWithHttpInfo (string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string scope = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoliciesApi : IPoliciesApi
    {
        private Finbourne.Access.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliciesApi(String basePath)
        {
            this.Configuration = new Finbourne.Access.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// </summary>
        /// <returns></returns>
        public PoliciesApi()
        {
            this.Configuration = Finbourne.Access.Sdk.Client.Configuration.Default;

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PoliciesApi(Finbourne.Access.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Finbourne.Access.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Access.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EARLY ACCESS] Create Policy Creates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse CreatePolicy (PolicyCreationRequest policyCreationRequest)
        {
             ApiResponse<PolicyResponse> localVarResponse = CreatePolicyWithHttpInfo(policyCreationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Create Policy Creates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public ApiResponse< PolicyResponse > CreatePolicyWithHttpInfo (PolicyCreationRequest policyCreationRequest)
        {
            // verify the required parameter 'policyCreationRequest' is set
            if (policyCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'policyCreationRequest' when calling PoliciesApi->CreatePolicy");

            var localVarPath = "./api/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyCreationRequest != null && policyCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(policyCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policyCreationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Create Policy Creates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync (PolicyCreationRequest policyCreationRequest)
        {
             ApiResponse<PolicyResponse> localVarResponse = await CreatePolicyAsyncWithHttpInfo(policyCreationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Create Policy Creates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreatePolicyAsyncWithHttpInfo (PolicyCreationRequest policyCreationRequest)
        {
            // verify the required parameter 'policyCreationRequest' is set
            if (policyCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'policyCreationRequest' when calling PoliciesApi->CreatePolicy");

            var localVarPath = "./api/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyCreationRequest != null && policyCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(policyCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policyCreationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Create PolicyCollection Creates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <returns>PolicyCollectionResponse</returns>
        public PolicyCollectionResponse CreatePolicyCollection (PolicyCollectionCreationRequest policyCollectionCreationRequest)
        {
             ApiResponse<PolicyCollectionResponse> localVarResponse = CreatePolicyCollectionWithHttpInfo(policyCollectionCreationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Create PolicyCollection Creates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        public ApiResponse< PolicyCollectionResponse > CreatePolicyCollectionWithHttpInfo (PolicyCollectionCreationRequest policyCollectionCreationRequest)
        {
            // verify the required parameter 'policyCollectionCreationRequest' is set
            if (policyCollectionCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'policyCollectionCreationRequest' when calling PoliciesApi->CreatePolicyCollection");

            var localVarPath = "./api/policycollections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyCollectionCreationRequest != null && policyCollectionCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(policyCollectionCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policyCollectionCreationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePolicyCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyCollectionResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Create PolicyCollection Creates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyCollectionResponse> CreatePolicyCollectionAsync (PolicyCollectionCreationRequest policyCollectionCreationRequest)
        {
             ApiResponse<PolicyCollectionResponse> localVarResponse = await CreatePolicyCollectionAsyncWithHttpInfo(policyCollectionCreationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Create PolicyCollection Creates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> CreatePolicyCollectionAsyncWithHttpInfo (PolicyCollectionCreationRequest policyCollectionCreationRequest)
        {
            // verify the required parameter 'policyCollectionCreationRequest' is set
            if (policyCollectionCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'policyCollectionCreationRequest' when calling PoliciesApi->CreatePolicyCollection");

            var localVarPath = "./api/policycollections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyCollectionCreationRequest != null && policyCollectionCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(policyCollectionCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policyCollectionCreationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePolicyCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyCollectionResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Delete Policy Deletes an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns></returns>
        public void DeletePolicy (string code, string scope = null)
        {
             DeletePolicyWithHttpInfo(code, scope);
        }

        /// <summary>
        /// [EARLY ACCESS] Delete Policy Deletes an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePolicyWithHttpInfo (string code, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->DeletePolicy");

            var localVarPath = "./api/policies/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EARLY ACCESS] Delete Policy Deletes an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyAsync (string code, string scope = null)
        {
             await DeletePolicyAsyncWithHttpInfo(code, scope);

        }

        /// <summary>
        /// [EARLY ACCESS] Delete Policy Deletes an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyAsyncWithHttpInfo (string code, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->DeletePolicy");

            var localVarPath = "./api/policies/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EARLY ACCESS] Delete PolicyCollection Deletes an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns></returns>
        public void DeletePolicyCollection (string code, string scope = null)
        {
             DeletePolicyCollectionWithHttpInfo(code, scope);
        }

        /// <summary>
        /// [EARLY ACCESS] Delete PolicyCollection Deletes an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePolicyCollectionWithHttpInfo (string code, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->DeletePolicyCollection");

            var localVarPath = "./api/policycollections/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicyCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EARLY ACCESS] Delete PolicyCollection Deletes an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyCollectionAsync (string code, string scope = null)
        {
             await DeletePolicyCollectionAsyncWithHttpInfo(code, scope);

        }

        /// <summary>
        /// [EARLY ACCESS] Delete PolicyCollection Deletes an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyCollectionAsyncWithHttpInfo (string code, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->DeletePolicyCollection");

            var localVarPath = "./api/policycollections/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicyCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EARLY ACCESS] Run one or more evaluations Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="asAt">Optional. The requested AsAt date of the entitlements (optional)</param>
        /// <returns>Dictionary&lt;string, EvaluationResponse&gt;</returns>
        public Dictionary<string, EvaluationResponse> Evaluate (Dictionary<string, EvaluationRequest> requestBody, List<string> applications = null, DateTimeOffset? asAt = null)
        {
             ApiResponse<Dictionary<string, EvaluationResponse>> localVarResponse = EvaluateWithHttpInfo(requestBody, applications, asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Run one or more evaluations Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="asAt">Optional. The requested AsAt date of the entitlements (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, EvaluationResponse&gt;</returns>
        public ApiResponse< Dictionary<string, EvaluationResponse> > EvaluateWithHttpInfo (Dictionary<string, EvaluationRequest> requestBody, List<string> applications = null, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling PoliciesApi->Evaluate");

            var localVarPath = "./api/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "applications", applications)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Evaluate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, EvaluationResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Dictionary<string, EvaluationResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, EvaluationResponse>)));
        }

        /// <summary>
        /// [EARLY ACCESS] Run one or more evaluations Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="asAt">Optional. The requested AsAt date of the entitlements (optional)</param>
        /// <returns>Task of Dictionary&lt;string, EvaluationResponse&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, EvaluationResponse>> EvaluateAsync (Dictionary<string, EvaluationRequest> requestBody, List<string> applications = null, DateTimeOffset? asAt = null)
        {
             ApiResponse<Dictionary<string, EvaluationResponse>> localVarResponse = await EvaluateAsyncWithHttpInfo(requestBody, applications, asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Run one or more evaluations Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="asAt">Optional. The requested AsAt date of the entitlements (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, EvaluationResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, EvaluationResponse>>> EvaluateAsyncWithHttpInfo (Dictionary<string, EvaluationRequest> requestBody, List<string> applications = null, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling PoliciesApi->Evaluate");

            var localVarPath = "./api/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "applications", applications)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Evaluate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, EvaluationResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Dictionary<string, EvaluationResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, EvaluationResponse>)));
        }

        /// <summary>
        /// Get policies of requesting user Gets all Policies for the current user
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ICollection&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        public ICollection<AttachedPolicyDefinitionResponse> GetOwnPolicies (List<string> applications = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<ICollection<AttachedPolicyDefinitionResponse>> localVarResponse = GetOwnPoliciesWithHttpInfo(applications, asAt, sortBy, start, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get policies of requesting user Gets all Policies for the current user
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        public ApiResponse< ICollection<AttachedPolicyDefinitionResponse> > GetOwnPoliciesWithHttpInfo (List<string> applications = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "applications", applications)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<AttachedPolicyDefinitionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<AttachedPolicyDefinitionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachedPolicyDefinitionResponse>)));
        }

        /// <summary>
        /// Get policies of requesting user Gets all Policies for the current user
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ICollection&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<AttachedPolicyDefinitionResponse>> GetOwnPoliciesAsync (List<string> applications = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<ICollection<AttachedPolicyDefinitionResponse>> localVarResponse = await GetOwnPoliciesAsyncWithHttpInfo(applications, asAt, sortBy, start, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get policies of requesting user Gets all Policies for the current user
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;AttachedPolicyDefinitionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<AttachedPolicyDefinitionResponse>>> GetOwnPoliciesAsyncWithHttpInfo (List<string> applications = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "applications", applications)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<AttachedPolicyDefinitionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<AttachedPolicyDefinitionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachedPolicyDefinitionResponse>)));
        }

        /// <summary>
        /// [EARLY ACCESS] Get Policy Gets an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse GetPolicy (string code, DateTimeOffset? asAt = null, string scope = null)
        {
             ApiResponse<PolicyResponse> localVarResponse = GetPolicyWithHttpInfo(code, asAt, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Get Policy Gets an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public ApiResponse< PolicyResponse > GetPolicyWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->GetPolicy");

            var localVarPath = "./api/policies/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Get Policy Gets an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync (string code, DateTimeOffset? asAt = null, string scope = null)
        {
             ApiResponse<PolicyResponse> localVarResponse = await GetPolicyAsyncWithHttpInfo(code, asAt, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Get Policy Gets an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> GetPolicyAsyncWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->GetPolicy");

            var localVarPath = "./api/policies/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Get PolicyCollection Gets an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>PolicyCollectionResponse</returns>
        public PolicyCollectionResponse GetPolicyCollection (string code, DateTimeOffset? asAt = null, string scope = null)
        {
             ApiResponse<PolicyCollectionResponse> localVarResponse = GetPolicyCollectionWithHttpInfo(code, asAt, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Get PolicyCollection Gets an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        public ApiResponse< PolicyCollectionResponse > GetPolicyCollectionWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->GetPolicyCollection");

            var localVarPath = "./api/policycollections/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyCollectionResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Get PolicyCollection Gets an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyCollectionResponse> GetPolicyCollectionAsync (string code, DateTimeOffset? asAt = null, string scope = null)
        {
             ApiResponse<PolicyCollectionResponse> localVarResponse = await GetPolicyCollectionAsyncWithHttpInfo(code, asAt, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Get PolicyCollection Gets an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> GetPolicyCollectionAsyncWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->GetPolicyCollection");

            var localVarPath = "./api/policycollections/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyCollectionResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] List Policies Gets all Policies in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ICollection&lt;PolicyResponse&gt;</returns>
        public ICollection<PolicyResponse> ListPolicies (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<ICollection<PolicyResponse>> localVarResponse = ListPoliciesWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] List Policies Gets all Policies in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PolicyResponse&gt;</returns>
        public ApiResponse< ICollection<PolicyResponse> > ListPoliciesWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PolicyResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<PolicyResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PolicyResponse>)));
        }

        /// <summary>
        /// [EARLY ACCESS] List Policies Gets all Policies in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ICollection&lt;PolicyResponse&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PolicyResponse>> ListPoliciesAsync (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<ICollection<PolicyResponse>> localVarResponse = await ListPoliciesAsyncWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] List Policies Gets all Policies in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PolicyResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PolicyResponse>>> ListPoliciesAsyncWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PolicyResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<PolicyResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PolicyResponse>)));
        }

        /// <summary>
        /// [EARLY ACCESS] List PolicyCollections Gets all PolicyCollections in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ICollection&lt;PolicyCollectionResponse&gt;</returns>
        public ICollection<PolicyCollectionResponse> ListPolicyCollections (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<ICollection<PolicyCollectionResponse>> localVarResponse = ListPolicyCollectionsWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] List PolicyCollections Gets all PolicyCollections in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PolicyCollectionResponse&gt;</returns>
        public ApiResponse< ICollection<PolicyCollectionResponse> > ListPolicyCollectionsWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/policycollections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPolicyCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PolicyCollectionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<PolicyCollectionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PolicyCollectionResponse>)));
        }

        /// <summary>
        /// [EARLY ACCESS] List PolicyCollections Gets all PolicyCollections in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ICollection&lt;PolicyCollectionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PolicyCollectionResponse>> ListPolicyCollectionsAsync (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<ICollection<PolicyCollectionResponse>> localVarResponse = await ListPolicyCollectionsAsyncWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] List PolicyCollections Gets all PolicyCollections in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PolicyCollectionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PolicyCollectionResponse>>> ListPolicyCollectionsAsyncWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/policycollections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPolicyCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PolicyCollectionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<PolicyCollectionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PolicyCollectionResponse>)));
        }

        /// <summary>
        /// [EARLY ACCESS] Update Policy Updates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse UpdatePolicy (string code, PolicyUpdateRequest policyUpdateRequest, string scope = null)
        {
             ApiResponse<PolicyResponse> localVarResponse = UpdatePolicyWithHttpInfo(code, policyUpdateRequest, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Update Policy Updates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public ApiResponse< PolicyResponse > UpdatePolicyWithHttpInfo (string code, PolicyUpdateRequest policyUpdateRequest, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->UpdatePolicy");
            // verify the required parameter 'policyUpdateRequest' is set
            if (policyUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'policyUpdateRequest' when calling PoliciesApi->UpdatePolicy");

            var localVarPath = "./api/policies/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (policyUpdateRequest != null && policyUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(policyUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policyUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Update Policy Updates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync (string code, PolicyUpdateRequest policyUpdateRequest, string scope = null)
        {
             ApiResponse<PolicyResponse> localVarResponse = await UpdatePolicyAsyncWithHttpInfo(code, policyUpdateRequest, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Update Policy Updates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> UpdatePolicyAsyncWithHttpInfo (string code, PolicyUpdateRequest policyUpdateRequest, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->UpdatePolicy");
            // verify the required parameter 'policyUpdateRequest' is set
            if (policyUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'policyUpdateRequest' when calling PoliciesApi->UpdatePolicy");

            var localVarPath = "./api/policies/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (policyUpdateRequest != null && policyUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(policyUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policyUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Update PolicyCollection Updates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>PolicyCollectionResponse</returns>
        public PolicyCollectionResponse UpdatePolicyCollection (string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string scope = null)
        {
             ApiResponse<PolicyCollectionResponse> localVarResponse = UpdatePolicyCollectionWithHttpInfo(code, policyCollectionUpdateRequest, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Update PolicyCollection Updates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        public ApiResponse< PolicyCollectionResponse > UpdatePolicyCollectionWithHttpInfo (string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->UpdatePolicyCollection");
            // verify the required parameter 'policyCollectionUpdateRequest' is set
            if (policyCollectionUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'policyCollectionUpdateRequest' when calling PoliciesApi->UpdatePolicyCollection");

            var localVarPath = "./api/policycollections/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (policyCollectionUpdateRequest != null && policyCollectionUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(policyCollectionUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policyCollectionUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePolicyCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyCollectionResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Update PolicyCollection Updates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyCollectionResponse> UpdatePolicyCollectionAsync (string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string scope = null)
        {
             ApiResponse<PolicyCollectionResponse> localVarResponse = await UpdatePolicyCollectionAsyncWithHttpInfo(code, policyCollectionUpdateRequest, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Update PolicyCollection Updates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> UpdatePolicyCollectionAsyncWithHttpInfo (string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->UpdatePolicyCollection");
            // verify the required parameter 'policyCollectionUpdateRequest' is set
            if (policyCollectionUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'policyCollectionUpdateRequest' when calling PoliciesApi->UpdatePolicyCollection");

            var localVarPath = "./api/policycollections/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (policyCollectionUpdateRequest != null && policyCollectionUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(policyCollectionUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = policyCollectionUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePolicyCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyCollectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyCollectionResponse)));
        }

    }
}