/*
 * FINBOURNE Access Management API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Object = System.Object;
using InvalidOperationException = System.InvalidOperationException;
using Exception = System.Exception;
using ArgumentNullException = System.ArgumentNullException;
using SystemEventHandler = System.EventHandler;
using DateTimeOffset = System.DateTimeOffset;
using Guid = System.Guid;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Access.Sdk.Client;
using Finbourne.Access.Sdk.Extensions;
using Finbourne.Access.Sdk.Client.Auth;
using Finbourne.Access.Sdk.Model;

namespace Finbourne.Access.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// AddToPolicyCollection: Add To PolicyCollection
        /// </summary>
        /// <remarks>
        /// Add Policies and/or PolicyCollections to a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="addToPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to add to the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        PolicyCollectionResponse AddToPolicyCollection(string code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// AddToPolicyCollection: Add To PolicyCollection
        /// </summary>
        /// <remarks>
        /// Add Policies and/or PolicyCollections to a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="addToPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to add to the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        ApiResponse<PolicyCollectionResponse> AddToPolicyCollectionWithHttpInfo(string code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// CreatePolicy: Create Policy
        /// </summary>
        /// <remarks>
        /// Creates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse CreatePolicy(PolicyCreationRequest policyCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// CreatePolicy: Create Policy
        /// </summary>
        /// <remarks>
        /// Creates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> CreatePolicyWithHttpInfo(PolicyCreationRequest policyCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// CreatePolicyCollection: Create PolicyCollection
        /// </summary>
        /// <remarks>
        /// Creates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        PolicyCollectionResponse CreatePolicyCollection(PolicyCollectionCreationRequest policyCollectionCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// CreatePolicyCollection: Create PolicyCollection
        /// </summary>
        /// <remarks>
        /// Creates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        ApiResponse<PolicyCollectionResponse> CreatePolicyCollectionWithHttpInfo(PolicyCollectionCreationRequest policyCollectionCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// DeletePolicy: Delete Policy
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        void DeletePolicy(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// DeletePolicy: Delete Policy
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// DeletePolicyCollection: Delete PolicyCollection
        /// </summary>
        /// <remarks>
        /// Deletes an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        void DeletePolicyCollection(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// DeletePolicyCollection: Delete PolicyCollection
        /// </summary>
        /// <remarks>
        /// Deletes an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyCollectionWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// Evaluate: Run one or more evaluations
        /// </summary>
        /// <remarks>
        /// Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Dictionary&lt;string, EvaluationResponse&gt;</returns>
        Dictionary<string, EvaluationResponse> Evaluate(Dictionary<string, EvaluationRequest> requestBody, List<string>? applications = default(List<string>?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// Evaluate: Run one or more evaluations
        /// </summary>
        /// <remarks>
        /// Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, EvaluationResponse&gt;</returns>
        ApiResponse<Dictionary<string, EvaluationResponse>> EvaluateWithHttpInfo(Dictionary<string, EvaluationRequest> requestBody, List<string>? applications = default(List<string>?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// GetOwnPolicies: Get policies of requesting user
        /// </summary>
        /// <remarks>
        /// Gets all Policies for the current user
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>List&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        List<AttachedPolicyDefinitionResponse> GetOwnPolicies(List<string>? applications = default(List<string>?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// GetOwnPolicies: Get policies of requesting user
        /// </summary>
        /// <remarks>
        /// Gets all Policies for the current user
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of List&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        ApiResponse<List<AttachedPolicyDefinitionResponse>> GetOwnPoliciesWithHttpInfo(List<string>? applications = default(List<string>?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// GetPolicy: Get Policy
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse GetPolicy(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// GetPolicy: Get Policy
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> GetPolicyWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// GetPolicyCollection: Get PolicyCollection
        /// </summary>
        /// <remarks>
        /// Gets an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        PolicyCollectionResponse GetPolicyCollection(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// GetPolicyCollection: Get PolicyCollection
        /// </summary>
        /// <remarks>
        /// Gets an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        ApiResponse<PolicyCollectionResponse> GetPolicyCollectionWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// ListPolicies: List Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies in a scope. For pagination support, use PagePolicies.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>List&lt;PolicyResponse&gt;</returns>
        List<PolicyResponse> ListPolicies(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// ListPolicies: List Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies in a scope. For pagination support, use PagePolicies.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of List&lt;PolicyResponse&gt;</returns>
        ApiResponse<List<PolicyResponse>> ListPoliciesWithHttpInfo(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// ListPolicyCollections: List PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>List&lt;PolicyCollectionResponse&gt;</returns>
        List<PolicyCollectionResponse> ListPolicyCollections(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// ListPolicyCollections: List PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of List&lt;PolicyCollectionResponse&gt;</returns>
        ApiResponse<List<PolicyCollectionResponse>> ListPolicyCollectionsWithHttpInfo(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// PagePolicies: Page Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ResourceListOfPolicyResponse</returns>
        ResourceListOfPolicyResponse PagePolicies(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// PagePolicies: Page Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of ResourceListOfPolicyResponse</returns>
        ApiResponse<ResourceListOfPolicyResponse> PagePoliciesWithHttpInfo(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// PagePolicyCollections: Page PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ResourceListOfPolicyCollectionResponse</returns>
        ResourceListOfPolicyCollectionResponse PagePolicyCollections(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// PagePolicyCollections: Page PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of ResourceListOfPolicyCollectionResponse</returns>
        ApiResponse<ResourceListOfPolicyCollectionResponse> PagePolicyCollectionsWithHttpInfo(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// RemoveFromPolicyCollection: Remove From PolicyCollection
        /// </summary>
        /// <remarks>
        /// Remove Policies and/or PolicyCollections from a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="removeFromPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        PolicyCollectionResponse RemoveFromPolicyCollection(string code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// RemoveFromPolicyCollection: Remove From PolicyCollection
        /// </summary>
        /// <remarks>
        /// Remove Policies and/or PolicyCollections from a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="removeFromPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        ApiResponse<PolicyCollectionResponse> RemoveFromPolicyCollectionWithHttpInfo(string code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// UpdatePolicy: Update Policy
        /// </summary>
        /// <remarks>
        /// Updates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse UpdatePolicy(string code, PolicyUpdateRequest policyUpdateRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// UpdatePolicy: Update Policy
        /// </summary>
        /// <remarks>
        /// Updates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> UpdatePolicyWithHttpInfo(string code, PolicyUpdateRequest policyUpdateRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// UpdatePolicyCollection: Update PolicyCollection
        /// </summary>
        /// <remarks>
        /// Updates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        PolicyCollectionResponse UpdatePolicyCollection(string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// UpdatePolicyCollection: Update PolicyCollection
        /// </summary>
        /// <remarks>
        /// Updates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        ApiResponse<PolicyCollectionResponse> UpdatePolicyCollectionWithHttpInfo(string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// AddToPolicyCollection: Add To PolicyCollection
        /// </summary>
        /// <remarks>
        /// Add Policies and/or PolicyCollections to a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="addToPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to add to the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<PolicyCollectionResponse> AddToPolicyCollectionAsync(string code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// AddToPolicyCollection: Add To PolicyCollection
        /// </summary>
        /// <remarks>
        /// Add Policies and/or PolicyCollections to a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="addToPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to add to the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> AddToPolicyCollectionWithHttpInfoAsync(string code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// CreatePolicy: Create Policy
        /// </summary>
        /// <remarks>
        /// Creates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync(PolicyCreationRequest policyCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// CreatePolicy: Create Policy
        /// </summary>
        /// <remarks>
        /// Creates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreatePolicyWithHttpInfoAsync(PolicyCreationRequest policyCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// CreatePolicyCollection: Create PolicyCollection
        /// </summary>
        /// <remarks>
        /// Creates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<PolicyCollectionResponse> CreatePolicyCollectionAsync(PolicyCollectionCreationRequest policyCollectionCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// CreatePolicyCollection: Create PolicyCollection
        /// </summary>
        /// <remarks>
        /// Creates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> CreatePolicyCollectionWithHttpInfoAsync(PolicyCollectionCreationRequest policyCollectionCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// DeletePolicy: Delete Policy
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// DeletePolicy: Delete Policy
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// DeletePolicyCollection: Delete PolicyCollection
        /// </summary>
        /// <remarks>
        /// Deletes an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyCollectionAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// DeletePolicyCollection: Delete PolicyCollection
        /// </summary>
        /// <remarks>
        /// Deletes an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyCollectionWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// Evaluate: Run one or more evaluations
        /// </summary>
        /// <remarks>
        /// Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of Dictionary&lt;string, EvaluationResponse&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, EvaluationResponse>> EvaluateAsync(Dictionary<string, EvaluationRequest> requestBody, List<string>? applications = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// Evaluate: Run one or more evaluations
        /// </summary>
        /// <remarks>
        /// Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, EvaluationResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, EvaluationResponse>>> EvaluateWithHttpInfoAsync(Dictionary<string, EvaluationRequest> requestBody, List<string>? applications = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// GetOwnPolicies: Get policies of requesting user
        /// </summary>
        /// <remarks>
        /// Gets all Policies for the current user
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of List&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        System.Threading.Tasks.Task<List<AttachedPolicyDefinitionResponse>> GetOwnPoliciesAsync(List<string>? applications = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// GetOwnPolicies: Get policies of requesting user
        /// </summary>
        /// <remarks>
        /// Gets all Policies for the current user
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (List&lt;AttachedPolicyDefinitionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachedPolicyDefinitionResponse>>> GetOwnPoliciesWithHttpInfoAsync(List<string>? applications = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// GetPolicy: Get Policy
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// GetPolicy: Get Policy
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> GetPolicyWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// GetPolicyCollection: Get PolicyCollection
        /// </summary>
        /// <remarks>
        /// Gets an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<PolicyCollectionResponse> GetPolicyCollectionAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// GetPolicyCollection: Get PolicyCollection
        /// </summary>
        /// <remarks>
        /// Gets an identified PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> GetPolicyCollectionWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// ListPolicies: List Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies in a scope. For pagination support, use PagePolicies.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of List&lt;PolicyResponse&gt;</returns>
        System.Threading.Tasks.Task<List<PolicyResponse>> ListPoliciesAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// ListPolicies: List Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies in a scope. For pagination support, use PagePolicies.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (List&lt;PolicyResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PolicyResponse>>> ListPoliciesWithHttpInfoAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// ListPolicyCollections: List PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of List&lt;PolicyCollectionResponse&gt;</returns>
        System.Threading.Tasks.Task<List<PolicyCollectionResponse>> ListPolicyCollectionsAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// ListPolicyCollections: List PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (List&lt;PolicyCollectionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PolicyCollectionResponse>>> ListPolicyCollectionsWithHttpInfoAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// PagePolicies: Page Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ResourceListOfPolicyResponse</returns>
        System.Threading.Tasks.Task<ResourceListOfPolicyResponse> PagePoliciesAsync(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// PagePolicies: Page Policies
        /// </summary>
        /// <remarks>
        /// Gets all Policies with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfPolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfPolicyResponse>> PagePoliciesWithHttpInfoAsync(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// PagePolicyCollections: Page PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ResourceListOfPolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<ResourceListOfPolicyCollectionResponse> PagePolicyCollectionsAsync(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// PagePolicyCollections: Page PolicyCollections
        /// </summary>
        /// <remarks>
        /// Gets all PolicyCollections with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfPolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfPolicyCollectionResponse>> PagePolicyCollectionsWithHttpInfoAsync(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// RemoveFromPolicyCollection: Remove From PolicyCollection
        /// </summary>
        /// <remarks>
        /// Remove Policies and/or PolicyCollections from a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="removeFromPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<PolicyCollectionResponse> RemoveFromPolicyCollectionAsync(string code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// RemoveFromPolicyCollection: Remove From PolicyCollection
        /// </summary>
        /// <remarks>
        /// Remove Policies and/or PolicyCollections from a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="removeFromPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> RemoveFromPolicyCollectionWithHttpInfoAsync(string code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// UpdatePolicy: Update Policy
        /// </summary>
        /// <remarks>
        /// Updates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync(string code, PolicyUpdateRequest policyUpdateRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// UpdatePolicy: Update Policy
        /// </summary>
        /// <remarks>
        /// Updates a Policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> UpdatePolicyWithHttpInfoAsync(string code, PolicyUpdateRequest policyUpdateRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// UpdatePolicyCollection: Update PolicyCollection
        /// </summary>
        /// <remarks>
        /// Updates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        System.Threading.Tasks.Task<PolicyCollectionResponse> UpdatePolicyCollectionAsync(string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// UpdatePolicyCollection: Update PolicyCollection
        /// </summary>
        /// <remarks>
        /// Updates a PolicyCollection
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyCollectionResponse>> UpdatePolicyCollectionWithHttpInfoAsync(string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApi : IPoliciesApiSync, IPoliciesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoliciesApi : IPoliciesApi
    {
        private Finbourne.Access.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliciesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliciesApi(string basePath)
        {
            var globalConfiguration = Finbourne.Access.Sdk.Client.GlobalConfiguration.Instance;
            this.Configuration = Finbourne.Access.Sdk.Client.Configuration.MergeConfigurations(
                globalConfiguration,
                new Finbourne.Access.Sdk.Client.Configuration
                {
                    BasePath = basePath,
                    TimeoutMs = globalConfiguration.TimeoutMs,
                    RateLimitRetries = globalConfiguration.RateLimitRetries
                }
            );
            this.Client = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PoliciesApi(Finbourne.Access.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PoliciesApi(Finbourne.Access.Sdk.Client.ISynchronousClient client, Finbourne.Access.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Access.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Access.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Access.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// AddToPolicyCollection: Add To PolicyCollection Add Policies and/or PolicyCollections to a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="addToPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to add to the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        public PolicyCollectionResponse AddToPolicyCollection(string code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = AddToPolicyCollectionWithHttpInfo(code, addToPolicyCollectionRequest, scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AddToPolicyCollection: Add To PolicyCollection Add Policies and/or PolicyCollections to a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="addToPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to add to the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> AddToPolicyCollectionWithHttpInfo(string code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->AddToPolicyCollection");
            }

            // verify the required parameter 'addToPolicyCollectionRequest' is set
            if (addToPolicyCollectionRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'addToPolicyCollectionRequest' when calling PoliciesApi->AddToPolicyCollection");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = addToPolicyCollectionRequest;

            localVarRequestOptions.Operation = "PoliciesApi.AddToPolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyCollectionResponse>("/api/policycollections/{code}/add", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToPolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// AddToPolicyCollection: Add To PolicyCollection Add Policies and/or PolicyCollections to a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="addToPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to add to the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyCollectionResponse> AddToPolicyCollectionAsync(string code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = await AddToPolicyCollectionWithHttpInfoAsync(code, addToPolicyCollectionRequest, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AddToPolicyCollection: Add To PolicyCollection Add Policies and/or PolicyCollections to a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="addToPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to add to the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse>> AddToPolicyCollectionWithHttpInfoAsync(string code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->AddToPolicyCollection");
            }

            // verify the required parameter 'addToPolicyCollectionRequest' is set
            if (addToPolicyCollectionRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'addToPolicyCollectionRequest' when calling PoliciesApi->AddToPolicyCollection");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = addToPolicyCollectionRequest;

            localVarRequestOptions.Operation = "PoliciesApi.AddToPolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PolicyCollectionResponse>("/api/policycollections/{code}/add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToPolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreatePolicy: Create Policy Creates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse CreatePolicy(PolicyCreationRequest policyCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> localVarResponse = CreatePolicyWithHttpInfo(policyCreationRequest, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreatePolicy: Create Policy Creates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> CreatePolicyWithHttpInfo(PolicyCreationRequest policyCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'policyCreationRequest' is set
            if (policyCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCreationRequest' when calling PoliciesApi->CreatePolicy");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = policyCreationRequest;

            localVarRequestOptions.Operation = "PoliciesApi.CreatePolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyResponse>("/api/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreatePolicy: Create Policy Creates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync(PolicyCreationRequest policyCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> localVarResponse = await CreatePolicyWithHttpInfoAsync(policyCreationRequest, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreatePolicy: Create Policy Creates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCreationRequest">The definition of the Policy</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse>> CreatePolicyWithHttpInfoAsync(PolicyCreationRequest policyCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'policyCreationRequest' is set
            if (policyCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCreationRequest' when calling PoliciesApi->CreatePolicy");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = policyCreationRequest;

            localVarRequestOptions.Operation = "PoliciesApi.CreatePolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PolicyResponse>("/api/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreatePolicyCollection: Create PolicyCollection Creates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        public PolicyCollectionResponse CreatePolicyCollection(PolicyCollectionCreationRequest policyCollectionCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = CreatePolicyCollectionWithHttpInfo(policyCollectionCreationRequest, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreatePolicyCollection: Create PolicyCollection Creates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> CreatePolicyCollectionWithHttpInfo(PolicyCollectionCreationRequest policyCollectionCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'policyCollectionCreationRequest' is set
            if (policyCollectionCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCollectionCreationRequest' when calling PoliciesApi->CreatePolicyCollection");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = policyCollectionCreationRequest;

            localVarRequestOptions.Operation = "PoliciesApi.CreatePolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyCollectionResponse>("/api/policycollections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreatePolicyCollection: Create PolicyCollection Creates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyCollectionResponse> CreatePolicyCollectionAsync(PolicyCollectionCreationRequest policyCollectionCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = await CreatePolicyCollectionWithHttpInfoAsync(policyCollectionCreationRequest, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreatePolicyCollection: Create PolicyCollection Creates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyCollectionCreationRequest">The definition of the PolicyCollection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse>> CreatePolicyCollectionWithHttpInfoAsync(PolicyCollectionCreationRequest policyCollectionCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'policyCollectionCreationRequest' is set
            if (policyCollectionCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCollectionCreationRequest' when calling PoliciesApi->CreatePolicyCollection");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = policyCollectionCreationRequest;

            localVarRequestOptions.Operation = "PoliciesApi.CreatePolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PolicyCollectionResponse>("/api/policycollections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeletePolicy: Delete Policy Deletes an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        public void DeletePolicy(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            DeletePolicyWithHttpInfo(code, scope, opts: opts);
        }

        /// <summary>
        /// DeletePolicy: Delete Policy Deletes an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<Object> DeletePolicyWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->DeletePolicy");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.DeletePolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/policies/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeletePolicy: Delete Policy Deletes an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            await DeletePolicyWithHttpInfoAsync(code, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
        }

        /// <summary>
        /// DeletePolicy: Delete Policy Deletes an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> DeletePolicyWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->DeletePolicy");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.DeletePolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/policies/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeletePolicyCollection: Delete PolicyCollection Deletes an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        public void DeletePolicyCollection(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            DeletePolicyCollectionWithHttpInfo(code, scope, opts: opts);
        }

        /// <summary>
        /// DeletePolicyCollection: Delete PolicyCollection Deletes an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<Object> DeletePolicyCollectionWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->DeletePolicyCollection");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.DeletePolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/policycollections/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeletePolicyCollection: Delete PolicyCollection Deletes an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyCollectionAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            await DeletePolicyCollectionWithHttpInfoAsync(code, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
        }

        /// <summary>
        /// DeletePolicyCollection: Delete PolicyCollection Deletes an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> DeletePolicyCollectionWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->DeletePolicyCollection");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.DeletePolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/policycollections/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate: Run one or more evaluations Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Dictionary&lt;string, EvaluationResponse&gt;</returns>
        public Dictionary<string, EvaluationResponse> Evaluate(Dictionary<string, EvaluationRequest> requestBody, List<string>? applications = default(List<string>?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<Dictionary<string, EvaluationResponse>> localVarResponse = EvaluateWithHttpInfo(requestBody, applications, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate: Run one or more evaluations Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, EvaluationResponse&gt;</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<Dictionary<string, EvaluationResponse>> EvaluateWithHttpInfo(Dictionary<string, EvaluationRequest> requestBody, List<string>? applications = default(List<string>?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'requestBody' when calling PoliciesApi->Evaluate");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (applications != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "applications", applications));
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "PoliciesApi.Evaluate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, EvaluationResponse>>("/api/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Evaluate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate: Run one or more evaluations Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of Dictionary&lt;string, EvaluationResponse&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, EvaluationResponse>> EvaluateAsync(Dictionary<string, EvaluationRequest> requestBody, List<string>? applications = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<Dictionary<string, EvaluationResponse>> localVarResponse = await EvaluateWithHttpInfoAsync(requestBody, applications, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate: Run one or more evaluations Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation).</param>
        /// <param name="applications">Optional. The application type of the roles and policies to use when evaluating. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, EvaluationResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Dictionary<string, EvaluationResponse>>> EvaluateWithHttpInfoAsync(Dictionary<string, EvaluationRequest> requestBody, List<string>? applications = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'requestBody' when calling PoliciesApi->Evaluate");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (applications != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "applications", applications));
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "PoliciesApi.Evaluate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, EvaluationResponse>>("/api/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Evaluate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetOwnPolicies: Get policies of requesting user Gets all Policies for the current user
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>List&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        public List<AttachedPolicyDefinitionResponse> GetOwnPolicies(List<string>? applications = default(List<string>?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<List<AttachedPolicyDefinitionResponse>> localVarResponse = GetOwnPoliciesWithHttpInfo(applications, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetOwnPolicies: Get policies of requesting user Gets all Policies for the current user
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of List&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<List<AttachedPolicyDefinitionResponse>> GetOwnPoliciesWithHttpInfo(List<string>? applications = default(List<string>?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (applications != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "applications", applications));
            }

            localVarRequestOptions.Operation = "PoliciesApi.GetOwnPolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AttachedPolicyDefinitionResponse>>("/api/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetOwnPolicies: Get policies of requesting user Gets all Policies for the current user
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of List&lt;AttachedPolicyDefinitionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachedPolicyDefinitionResponse>> GetOwnPoliciesAsync(List<string>? applications = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<List<AttachedPolicyDefinitionResponse>> localVarResponse = await GetOwnPoliciesWithHttpInfoAsync(applications, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetOwnPolicies: Get policies of requesting user Gets all Policies for the current user
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applications">Optional. Filter on the applications that the policies apply to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (List&lt;AttachedPolicyDefinitionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<List<AttachedPolicyDefinitionResponse>>> GetOwnPoliciesWithHttpInfoAsync(List<string>? applications = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (applications != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "applications", applications));
            }

            localVarRequestOptions.Operation = "PoliciesApi.GetOwnPolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AttachedPolicyDefinitionResponse>>("/api/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPolicy: Get Policy Gets an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse GetPolicy(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> localVarResponse = GetPolicyWithHttpInfo(code, scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPolicy: Get Policy Gets an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> GetPolicyWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->GetPolicy");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.GetPolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PolicyResponse>("/api/policies/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPolicy: Get Policy Gets an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> localVarResponse = await GetPolicyWithHttpInfoAsync(code, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPolicy: Get Policy Gets an identified Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse>> GetPolicyWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->GetPolicy");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.GetPolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PolicyResponse>("/api/policies/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPolicyCollection: Get PolicyCollection Gets an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        public PolicyCollectionResponse GetPolicyCollection(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = GetPolicyCollectionWithHttpInfo(code, scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPolicyCollection: Get PolicyCollection Gets an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> GetPolicyCollectionWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->GetPolicyCollection");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.GetPolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PolicyCollectionResponse>("/api/policycollections/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPolicyCollection: Get PolicyCollection Gets an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyCollectionResponse> GetPolicyCollectionAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = await GetPolicyCollectionWithHttpInfoAsync(code, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPolicyCollection: Get PolicyCollection Gets an identified PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse>> GetPolicyCollectionWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->GetPolicyCollection");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.GetPolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PolicyCollectionResponse>("/api/policycollections/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListPolicies: List Policies Gets all Policies in a scope. For pagination support, use PagePolicies.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>List&lt;PolicyResponse&gt;</returns>
        public List<PolicyResponse> ListPolicies(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<List<PolicyResponse>> localVarResponse = ListPoliciesWithHttpInfo(scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListPolicies: List Policies Gets all Policies in a scope. For pagination support, use PagePolicies.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of List&lt;PolicyResponse&gt;</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<List<PolicyResponse>> ListPoliciesWithHttpInfo(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.ListPolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PolicyResponse>>("/api/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListPolicies: List Policies Gets all Policies in a scope. For pagination support, use PagePolicies.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of List&lt;PolicyResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<PolicyResponse>> ListPoliciesAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<List<PolicyResponse>> localVarResponse = await ListPoliciesWithHttpInfoAsync(scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListPolicies: List Policies Gets all Policies in a scope. For pagination support, use PagePolicies.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (List&lt;PolicyResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<List<PolicyResponse>>> ListPoliciesWithHttpInfoAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.ListPolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PolicyResponse>>("/api/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListPolicyCollections: List PolicyCollections Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>List&lt;PolicyCollectionResponse&gt;</returns>
        public List<PolicyCollectionResponse> ListPolicyCollections(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<List<PolicyCollectionResponse>> localVarResponse = ListPolicyCollectionsWithHttpInfo(scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListPolicyCollections: List PolicyCollections Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of List&lt;PolicyCollectionResponse&gt;</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<List<PolicyCollectionResponse>> ListPolicyCollectionsWithHttpInfo(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.ListPolicyCollections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PolicyCollectionResponse>>("/api/policycollections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPolicyCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListPolicyCollections: List PolicyCollections Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of List&lt;PolicyCollectionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<PolicyCollectionResponse>> ListPolicyCollectionsAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<List<PolicyCollectionResponse>> localVarResponse = await ListPolicyCollectionsWithHttpInfoAsync(scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListPolicyCollections: List PolicyCollections Gets all PolicyCollections in a scope. For pagination support, use PagePolicyCollections
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use the default scope if not provided. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (List&lt;PolicyCollectionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<List<PolicyCollectionResponse>>> ListPolicyCollectionsWithHttpInfoAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PoliciesApi.ListPolicyCollections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PolicyCollectionResponse>>("/api/policycollections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPolicyCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PagePolicies: Page Policies Gets all Policies with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ResourceListOfPolicyResponse</returns>
        public ResourceListOfPolicyResponse PagePolicies(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyResponse> localVarResponse = PagePoliciesWithHttpInfo(sortBy, limit, filter, page, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PagePolicies: Page Policies Gets all Policies with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of ResourceListOfPolicyResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyResponse> PagePoliciesWithHttpInfo(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "PoliciesApi.PagePolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfPolicyResponse>("/api/policies/page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PagePolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PagePolicies: Page Policies Gets all Policies with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ResourceListOfPolicyResponse</returns>
        public async System.Threading.Tasks.Task<ResourceListOfPolicyResponse> PagePoliciesAsync(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyResponse> localVarResponse = await PagePoliciesWithHttpInfoAsync(sortBy, limit, filter, page, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PagePolicies: Page Policies Gets all Policies with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfPolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyResponse>> PagePoliciesWithHttpInfoAsync(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "PoliciesApi.PagePolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfPolicyResponse>("/api/policies/page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PagePolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PagePolicyCollections: Page PolicyCollections Gets all PolicyCollections with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ResourceListOfPolicyCollectionResponse</returns>
        public ResourceListOfPolicyCollectionResponse PagePolicyCollections(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyCollectionResponse> localVarResponse = PagePolicyCollectionsWithHttpInfo(sortBy, limit, filter, page, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PagePolicyCollections: Page PolicyCollections Gets all PolicyCollections with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of ResourceListOfPolicyCollectionResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyCollectionResponse> PagePolicyCollectionsWithHttpInfo(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "PoliciesApi.PagePolicyCollections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfPolicyCollectionResponse>("/api/policycollections/page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PagePolicyCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PagePolicyCollections: Page PolicyCollections Gets all PolicyCollections with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ResourceListOfPolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<ResourceListOfPolicyCollectionResponse> PagePolicyCollectionsAsync(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyCollectionResponse> localVarResponse = await PagePolicyCollectionsWithHttpInfoAsync(sortBy, limit, filter, page, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PagePolicyCollections: Page PolicyCollections Gets all PolicyCollections with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfPolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyCollectionResponse>> PagePolicyCollectionsWithHttpInfoAsync(string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "PoliciesApi.PagePolicyCollections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfPolicyCollectionResponse>("/api/policycollections/page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PagePolicyCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RemoveFromPolicyCollection: Remove From PolicyCollection Remove Policies and/or PolicyCollections from a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="removeFromPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        public PolicyCollectionResponse RemoveFromPolicyCollection(string code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = RemoveFromPolicyCollectionWithHttpInfo(code, removeFromPolicyCollectionRequest, scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RemoveFromPolicyCollection: Remove From PolicyCollection Remove Policies and/or PolicyCollections from a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="removeFromPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> RemoveFromPolicyCollectionWithHttpInfo(string code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->RemoveFromPolicyCollection");
            }

            // verify the required parameter 'removeFromPolicyCollectionRequest' is set
            if (removeFromPolicyCollectionRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'removeFromPolicyCollectionRequest' when calling PoliciesApi->RemoveFromPolicyCollection");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = removeFromPolicyCollectionRequest;

            localVarRequestOptions.Operation = "PoliciesApi.RemoveFromPolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyCollectionResponse>("/api/policycollections/{code}/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFromPolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RemoveFromPolicyCollection: Remove From PolicyCollection Remove Policies and/or PolicyCollections from a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="removeFromPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyCollectionResponse> RemoveFromPolicyCollectionAsync(string code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = await RemoveFromPolicyCollectionWithHttpInfoAsync(code, removeFromPolicyCollectionRequest, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RemoveFromPolicyCollection: Remove From PolicyCollection Remove Policies and/or PolicyCollections from a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="removeFromPolicyCollectionRequest">Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse>> RemoveFromPolicyCollectionWithHttpInfoAsync(string code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->RemoveFromPolicyCollection");
            }

            // verify the required parameter 'removeFromPolicyCollectionRequest' is set
            if (removeFromPolicyCollectionRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'removeFromPolicyCollectionRequest' when calling PoliciesApi->RemoveFromPolicyCollection");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = removeFromPolicyCollectionRequest;

            localVarRequestOptions.Operation = "PoliciesApi.RemoveFromPolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PolicyCollectionResponse>("/api/policycollections/{code}/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFromPolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdatePolicy: Update Policy Updates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse UpdatePolicy(string code, PolicyUpdateRequest policyUpdateRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> localVarResponse = UpdatePolicyWithHttpInfo(code, policyUpdateRequest, scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdatePolicy: Update Policy Updates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> UpdatePolicyWithHttpInfo(string code, PolicyUpdateRequest policyUpdateRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->UpdatePolicy");
            }

            // verify the required parameter 'policyUpdateRequest' is set
            if (policyUpdateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyUpdateRequest' when calling PoliciesApi->UpdatePolicy");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = policyUpdateRequest;

            localVarRequestOptions.Operation = "PoliciesApi.UpdatePolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PolicyResponse>("/api/policies/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdatePolicy: Update Policy Updates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync(string code, PolicyUpdateRequest policyUpdateRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse> localVarResponse = await UpdatePolicyWithHttpInfoAsync(code, policyUpdateRequest, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdatePolicy: Update Policy Updates a Policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy</param>
        /// <param name="policyUpdateRequest">The updated definition of the Policy</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyResponse>> UpdatePolicyWithHttpInfoAsync(string code, PolicyUpdateRequest policyUpdateRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->UpdatePolicy");
            }

            // verify the required parameter 'policyUpdateRequest' is set
            if (policyUpdateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyUpdateRequest' when calling PoliciesApi->UpdatePolicy");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = policyUpdateRequest;

            localVarRequestOptions.Operation = "PoliciesApi.UpdatePolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PolicyResponse>("/api/policies/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdatePolicyCollection: Update PolicyCollection Updates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>PolicyCollectionResponse</returns>
        public PolicyCollectionResponse UpdatePolicyCollection(string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = UpdatePolicyCollectionWithHttpInfo(code, policyCollectionUpdateRequest, scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdatePolicyCollection: Update PolicyCollection Updates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of PolicyCollectionResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> UpdatePolicyCollectionWithHttpInfo(string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->UpdatePolicyCollection");
            }

            // verify the required parameter 'policyCollectionUpdateRequest' is set
            if (policyCollectionUpdateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCollectionUpdateRequest' when calling PoliciesApi->UpdatePolicyCollection");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = policyCollectionUpdateRequest;

            localVarRequestOptions.Operation = "PoliciesApi.UpdatePolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PolicyCollectionResponse>("/api/policycollections/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdatePolicyCollection: Update PolicyCollection Updates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of PolicyCollectionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyCollectionResponse> UpdatePolicyCollectionAsync(string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse> localVarResponse = await UpdatePolicyCollectionWithHttpInfoAsync(code, policyCollectionUpdateRequest, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdatePolicyCollection: Update PolicyCollection Updates a PolicyCollection
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the PolicyCollection</param>
        /// <param name="policyCollectionUpdateRequest">The updated definition of the PolicyCollection</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (PolicyCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyCollectionResponse>> UpdatePolicyCollectionWithHttpInfoAsync(string code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PoliciesApi->UpdatePolicyCollection");
            }

            // verify the required parameter 'policyCollectionUpdateRequest' is set
            if (policyCollectionUpdateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCollectionUpdateRequest' when calling PoliciesApi->UpdatePolicyCollection");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = policyCollectionUpdateRequest;

            localVarRequestOptions.Operation = "PoliciesApi.UpdatePolicyCollection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PolicyCollectionResponse>("/api/policycollections/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicyCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}