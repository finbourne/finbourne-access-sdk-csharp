/*
 * FINBOURNE Access Management API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Object = System.Object;
using InvalidOperationException = System.InvalidOperationException;
using Exception = System.Exception;
using ArgumentNullException = System.ArgumentNullException;
using SystemEventHandler = System.EventHandler;
using DateTimeOffset = System.DateTimeOffset;
using Guid = System.Guid;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using IApiAccessor = Finbourne.Access.Sdk.Client.IApiAccessor;
using Finbourne.Access.Sdk.Extensions;
using Finbourne.Access.Sdk.Client.Auth;
using Finbourne.Access.Sdk.Model;

namespace Finbourne.Access.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserRolesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// AddPolicyCollectionToUserRole: Add a policy collection to a user-role
        /// </summary>
        /// <remarks>
        /// Adds a policy collection to a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyCollectionToRoleRequest">Dto of the policy collection to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        UserRoleResponse AddPolicyCollectionToUserRole(string userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// AddPolicyCollectionToUserRole: Add a policy collection to a user-role
        /// </summary>
        /// <remarks>
        /// Adds a policy collection to a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyCollectionToRoleRequest">Dto of the policy collection to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> AddPolicyCollectionToUserRoleWithHttpInfo(string userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// AddPolicyToUserRole: Add a policy to a user-role
        /// </summary>
        /// <remarks>
        /// Adds a policy to a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyToRoleRequest">Dto of the policy to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        UserRoleResponse AddPolicyToUserRole(string userid, AddPolicyToRoleRequest addPolicyToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// AddPolicyToUserRole: Add a policy to a user-role
        /// </summary>
        /// <remarks>
        /// Adds a policy to a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyToRoleRequest">Dto of the policy to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> AddPolicyToUserRoleWithHttpInfo(string userid, AddPolicyToRoleRequest addPolicyToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// CreateUserRole: Create a user-role
        /// </summary>
        /// <remarks>
        /// Creates a new user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRoleCreationRequest">Definition of the user-role to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        UserRoleResponse CreateUserRole(UserRoleCreationRequest userRoleCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// CreateUserRole: Create a user-role
        /// </summary>
        /// <remarks>
        /// Creates a new user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRoleCreationRequest">Definition of the user-role to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> CreateUserRoleWithHttpInfo(UserRoleCreationRequest userRoleCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// DeleteUserRole: Delete a user-role
        /// </summary>
        /// <remarks>
        /// Deletes an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        void DeleteUserRole(string userid, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// DeleteUserRole: Delete a user-role
        /// </summary>
        /// <remarks>
        /// Deletes an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<Object> DeleteUserRoleWithHttpInfo(string userid, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// GetUserRole: Get a user-role
        /// </summary>
        /// <remarks>
        /// Get an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to get.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        UserRoleResponse GetUserRole(string userid, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// GetUserRole: Get a user-role
        /// </summary>
        /// <remarks>
        /// Get an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to get.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> GetUserRoleWithHttpInfo(string userid, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// ListUserRoles: List user-roles
        /// </summary>
        /// <remarks>
        /// Lists all user-roles and pages.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="page">Optional. Encoded page string returned from a previous search result that will retrieve              the next page of data. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ResourceListOfUserRoleResponse</returns>
        ResourceListOfUserRoleResponse ListUserRoles(string? filter = default(string?), string? sortBy = default(string?), int? limit = default(int?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// ListUserRoles: List user-roles
        /// </summary>
        /// <remarks>
        /// Lists all user-roles and pages.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="page">Optional. Encoded page string returned from a previous search result that will retrieve              the next page of data. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of ResourceListOfUserRoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfUserRoleResponse> ListUserRolesWithHttpInfo(string? filter = default(string?), string? sortBy = default(string?), int? limit = default(int?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyCollectionScope">The scope of policy collection to remove from the User Role</param>
        /// <param name="policyCollectionCode">The code of the policy collection to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        void RemovePolicyCollectionFromUserRole(string userid, string policyCollectionScope, string policyCollectionCode, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyCollectionScope">The scope of policy collection to remove from the User Role</param>
        /// <param name="policyCollectionCode">The code of the policy collection to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<Object> RemovePolicyCollectionFromUserRoleWithHttpInfo(string userid, string policyCollectionScope, string policyCollectionCode, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// RemovePolicyFromUserRole: Remove a policy from a user-role
        /// </summary>
        /// <remarks>
        /// Removes a policy from a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyScope">The scope of the policy to remove from the User Role</param>
        /// <param name="policyCode">The code of the policy to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        void RemovePolicyFromUserRole(string userid, string policyScope, string policyCode, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// RemovePolicyFromUserRole: Remove a policy from a user-role
        /// </summary>
        /// <remarks>
        /// Removes a policy from a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyScope">The scope of the policy to remove from the User Role</param>
        /// <param name="policyCode">The code of the policy to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<Object> RemovePolicyFromUserRoleWithHttpInfo(string userid, string policyScope, string policyCode, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// UpdateUserRole: Update a user-role
        /// </summary>
        /// <remarks>
        /// Updates an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to be updated.</param>
        /// <param name="userRoleUpdateRequest">Definition of the update to apply to the user-role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        UserRoleResponse UpdateUserRole(string userid, UserRoleUpdateRequest userRoleUpdateRequest, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// UpdateUserRole: Update a user-role
        /// </summary>
        /// <remarks>
        /// Updates an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to be updated.</param>
        /// <param name="userRoleUpdateRequest">Definition of the update to apply to the user-role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> UpdateUserRoleWithHttpInfo(string userid, UserRoleUpdateRequest userRoleUpdateRequest, int operationIndex = 0, ConfigurationOptions? opts = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserRolesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// AddPolicyCollectionToUserRole: Add a policy collection to a user-role
        /// </summary>
        /// <remarks>
        /// Adds a policy collection to a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyCollectionToRoleRequest">Dto of the policy collection to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        System.Threading.Tasks.Task<UserRoleResponse> AddPolicyCollectionToUserRoleAsync(string userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// AddPolicyCollectionToUserRole: Add a policy collection to a user-role
        /// </summary>
        /// <remarks>
        /// Adds a policy collection to a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyCollectionToRoleRequest">Dto of the policy collection to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> AddPolicyCollectionToUserRoleWithHttpInfoAsync(string userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// AddPolicyToUserRole: Add a policy to a user-role
        /// </summary>
        /// <remarks>
        /// Adds a policy to a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyToRoleRequest">Dto of the policy to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        System.Threading.Tasks.Task<UserRoleResponse> AddPolicyToUserRoleAsync(string userid, AddPolicyToRoleRequest addPolicyToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// AddPolicyToUserRole: Add a policy to a user-role
        /// </summary>
        /// <remarks>
        /// Adds a policy to a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyToRoleRequest">Dto of the policy to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> AddPolicyToUserRoleWithHttpInfoAsync(string userid, AddPolicyToRoleRequest addPolicyToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// CreateUserRole: Create a user-role
        /// </summary>
        /// <remarks>
        /// Creates a new user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRoleCreationRequest">Definition of the user-role to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        System.Threading.Tasks.Task<UserRoleResponse> CreateUserRoleAsync(UserRoleCreationRequest userRoleCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// CreateUserRole: Create a user-role
        /// </summary>
        /// <remarks>
        /// Creates a new user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRoleCreationRequest">Definition of the user-role to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> CreateUserRoleWithHttpInfoAsync(UserRoleCreationRequest userRoleCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// DeleteUserRole: Delete a user-role
        /// </summary>
        /// <remarks>
        /// Deletes an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserRoleAsync(string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// DeleteUserRole: Delete a user-role
        /// </summary>
        /// <remarks>
        /// Deletes an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> DeleteUserRoleWithHttpInfoAsync(string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// GetUserRole: Get a user-role
        /// </summary>
        /// <remarks>
        /// Get an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to get.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        System.Threading.Tasks.Task<UserRoleResponse> GetUserRoleAsync(string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// GetUserRole: Get a user-role
        /// </summary>
        /// <remarks>
        /// Get an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to get.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> GetUserRoleWithHttpInfoAsync(string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// ListUserRoles: List user-roles
        /// </summary>
        /// <remarks>
        /// Lists all user-roles and pages.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="page">Optional. Encoded page string returned from a previous search result that will retrieve              the next page of data. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ResourceListOfUserRoleResponse</returns>
        System.Threading.Tasks.Task<ResourceListOfUserRoleResponse> ListUserRolesAsync(string? filter = default(string?), string? sortBy = default(string?), int? limit = default(int?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// ListUserRoles: List user-roles
        /// </summary>
        /// <remarks>
        /// Lists all user-roles and pages.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="page">Optional. Encoded page string returned from a previous search result that will retrieve              the next page of data. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfUserRoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfUserRoleResponse>> ListUserRolesWithHttpInfoAsync(string? filter = default(string?), string? sortBy = default(string?), int? limit = default(int?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyCollectionScope">The scope of policy collection to remove from the User Role</param>
        /// <param name="policyCollectionCode">The code of the policy collection to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemovePolicyCollectionFromUserRoleAsync(string userid, string policyCollectionScope, string policyCollectionCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyCollectionScope">The scope of policy collection to remove from the User Role</param>
        /// <param name="policyCollectionCode">The code of the policy collection to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> RemovePolicyCollectionFromUserRoleWithHttpInfoAsync(string userid, string policyCollectionScope, string policyCollectionCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// RemovePolicyFromUserRole: Remove a policy from a user-role
        /// </summary>
        /// <remarks>
        /// Removes a policy from a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyScope">The scope of the policy to remove from the User Role</param>
        /// <param name="policyCode">The code of the policy to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemovePolicyFromUserRoleAsync(string userid, string policyScope, string policyCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// RemovePolicyFromUserRole: Remove a policy from a user-role
        /// </summary>
        /// <remarks>
        /// Removes a policy from a user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyScope">The scope of the policy to remove from the User Role</param>
        /// <param name="policyCode">The code of the policy to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> RemovePolicyFromUserRoleWithHttpInfoAsync(string userid, string policyScope, string policyCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// UpdateUserRole: Update a user-role
        /// </summary>
        /// <remarks>
        /// Updates an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to be updated.</param>
        /// <param name="userRoleUpdateRequest">Definition of the update to apply to the user-role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        System.Threading.Tasks.Task<UserRoleResponse> UpdateUserRoleAsync(string userid, UserRoleUpdateRequest userRoleUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// UpdateUserRole: Update a user-role
        /// </summary>
        /// <remarks>
        /// Updates an identified user-role.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to be updated.</param>
        /// <param name="userRoleUpdateRequest">Definition of the update to apply to the user-role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> UpdateUserRoleWithHttpInfoAsync(string userid, UserRoleUpdateRequest userRoleUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserRolesApi : IUserRolesApiSync, IUserRolesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserRolesApi : IUserRolesApi
    {
        private Finbourne.Access.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserRolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserRolesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserRolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserRolesApi(string basePath)
        {
            var globalConfiguration = Finbourne.Access.Sdk.Client.GlobalConfiguration.Instance;
            this.Configuration = Finbourne.Access.Sdk.Client.Configuration.MergeConfigurations(
                globalConfiguration,
                new Finbourne.Access.Sdk.Client.Configuration
                {
                    BasePath = basePath,
                    TimeoutMs = globalConfiguration.TimeoutMs,
                    RateLimitRetries = globalConfiguration.RateLimitRetries
                }
            );
            this.Client = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserRolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserRolesApi(Finbourne.Access.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserRolesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserRolesApi(Finbourne.Access.Sdk.Client.ISynchronousClient client, Finbourne.Access.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Access.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Access.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Access.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// AddPolicyCollectionToUserRole: Add a policy collection to a user-role Adds a policy collection to a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyCollectionToRoleRequest">Dto of the policy collection to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        public UserRoleResponse AddPolicyCollectionToUserRole(string userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = AddPolicyCollectionToUserRoleWithHttpInfo(userid, addPolicyCollectionToRoleRequest, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AddPolicyCollectionToUserRole: Add a policy collection to a user-role Adds a policy collection to a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyCollectionToRoleRequest">Dto of the policy collection to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> AddPolicyCollectionToUserRoleWithHttpInfo(string userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->AddPolicyCollectionToUserRole");
            }

            // verify the required parameter 'addPolicyCollectionToRoleRequest' is set
            if (addPolicyCollectionToRoleRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'addPolicyCollectionToRoleRequest' when calling UserRolesApi->AddPolicyCollectionToUserRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = addPolicyCollectionToRoleRequest;

            localVarRequestOptions.Operation = "UserRolesApi.AddPolicyCollectionToUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserRoleResponse>("/api/userroles/{userid}/policycollections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPolicyCollectionToUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// AddPolicyCollectionToUserRole: Add a policy collection to a user-role Adds a policy collection to a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyCollectionToRoleRequest">Dto of the policy collection to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        public async System.Threading.Tasks.Task<UserRoleResponse> AddPolicyCollectionToUserRoleAsync(string userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = await AddPolicyCollectionToUserRoleWithHttpInfoAsync(userid, addPolicyCollectionToRoleRequest, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AddPolicyCollectionToUserRole: Add a policy collection to a user-role Adds a policy collection to a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyCollectionToRoleRequest">Dto of the policy collection to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> AddPolicyCollectionToUserRoleWithHttpInfoAsync(string userid, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->AddPolicyCollectionToUserRole");
            }

            // verify the required parameter 'addPolicyCollectionToRoleRequest' is set
            if (addPolicyCollectionToRoleRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'addPolicyCollectionToRoleRequest' when calling UserRolesApi->AddPolicyCollectionToUserRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = addPolicyCollectionToRoleRequest;

            localVarRequestOptions.Operation = "UserRolesApi.AddPolicyCollectionToUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserRoleResponse>("/api/userroles/{userid}/policycollections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPolicyCollectionToUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// AddPolicyToUserRole: Add a policy to a user-role Adds a policy to a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyToRoleRequest">Dto of the policy to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        public UserRoleResponse AddPolicyToUserRole(string userid, AddPolicyToRoleRequest addPolicyToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = AddPolicyToUserRoleWithHttpInfo(userid, addPolicyToRoleRequest, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AddPolicyToUserRole: Add a policy to a user-role Adds a policy to a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyToRoleRequest">Dto of the policy to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> AddPolicyToUserRoleWithHttpInfo(string userid, AddPolicyToRoleRequest addPolicyToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->AddPolicyToUserRole");
            }

            // verify the required parameter 'addPolicyToRoleRequest' is set
            if (addPolicyToRoleRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'addPolicyToRoleRequest' when calling UserRolesApi->AddPolicyToUserRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = addPolicyToRoleRequest;

            localVarRequestOptions.Operation = "UserRolesApi.AddPolicyToUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserRoleResponse>("/api/userroles/{userid}/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPolicyToUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// AddPolicyToUserRole: Add a policy to a user-role Adds a policy to a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyToRoleRequest">Dto of the policy to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        public async System.Threading.Tasks.Task<UserRoleResponse> AddPolicyToUserRoleAsync(string userid, AddPolicyToRoleRequest addPolicyToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = await AddPolicyToUserRoleWithHttpInfoAsync(userid, addPolicyToRoleRequest, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AddPolicyToUserRole: Add a policy to a user-role Adds a policy to a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="addPolicyToRoleRequest">Dto of the policy to be added.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> AddPolicyToUserRoleWithHttpInfoAsync(string userid, AddPolicyToRoleRequest addPolicyToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->AddPolicyToUserRole");
            }

            // verify the required parameter 'addPolicyToRoleRequest' is set
            if (addPolicyToRoleRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'addPolicyToRoleRequest' when calling UserRolesApi->AddPolicyToUserRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = addPolicyToRoleRequest;

            localVarRequestOptions.Operation = "UserRolesApi.AddPolicyToUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserRoleResponse>("/api/userroles/{userid}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPolicyToUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateUserRole: Create a user-role Creates a new user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRoleCreationRequest">Definition of the user-role to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        public UserRoleResponse CreateUserRole(UserRoleCreationRequest userRoleCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = CreateUserRoleWithHttpInfo(userRoleCreationRequest, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateUserRole: Create a user-role Creates a new user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRoleCreationRequest">Definition of the user-role to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> CreateUserRoleWithHttpInfo(UserRoleCreationRequest userRoleCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userRoleCreationRequest' is set
            if (userRoleCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userRoleCreationRequest' when calling UserRolesApi->CreateUserRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userRoleCreationRequest;

            localVarRequestOptions.Operation = "UserRolesApi.CreateUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserRoleResponse>("/api/userroles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateUserRole: Create a user-role Creates a new user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRoleCreationRequest">Definition of the user-role to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        public async System.Threading.Tasks.Task<UserRoleResponse> CreateUserRoleAsync(UserRoleCreationRequest userRoleCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = await CreateUserRoleWithHttpInfoAsync(userRoleCreationRequest, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateUserRole: Create a user-role Creates a new user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRoleCreationRequest">Definition of the user-role to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> CreateUserRoleWithHttpInfoAsync(UserRoleCreationRequest userRoleCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userRoleCreationRequest' is set
            if (userRoleCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userRoleCreationRequest' when calling UserRolesApi->CreateUserRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userRoleCreationRequest;

            localVarRequestOptions.Operation = "UserRolesApi.CreateUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserRoleResponse>("/api/userroles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteUserRole: Delete a user-role Deletes an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        public void DeleteUserRole(string userid, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            DeleteUserRoleWithHttpInfo(userid, opts: opts);
        }

        /// <summary>
        /// DeleteUserRole: Delete a user-role Deletes an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<Object> DeleteUserRoleWithHttpInfo(string userid, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->DeleteUserRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter

            localVarRequestOptions.Operation = "UserRolesApi.DeleteUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/userroles/{userid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteUserRole: Delete a user-role Deletes an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserRoleAsync(string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            await DeleteUserRoleWithHttpInfoAsync(userid, operationIndex, cancellationToken, opts).ConfigureAwait(false);
        }

        /// <summary>
        /// DeleteUserRole: Delete a user-role Deletes an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> DeleteUserRoleWithHttpInfoAsync(string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->DeleteUserRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter

            localVarRequestOptions.Operation = "UserRolesApi.DeleteUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/userroles/{userid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetUserRole: Get a user-role Get an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to get.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        public UserRoleResponse GetUserRole(string userid, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = GetUserRoleWithHttpInfo(userid, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetUserRole: Get a user-role Get an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to get.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> GetUserRoleWithHttpInfo(string userid, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->GetUserRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter

            localVarRequestOptions.Operation = "UserRolesApi.GetUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserRoleResponse>("/api/userroles/{userid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetUserRole: Get a user-role Get an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to get.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        public async System.Threading.Tasks.Task<UserRoleResponse> GetUserRoleAsync(string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = await GetUserRoleWithHttpInfoAsync(userid, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetUserRole: Get a user-role Get an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to get.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> GetUserRoleWithHttpInfoAsync(string userid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->GetUserRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter

            localVarRequestOptions.Operation = "UserRolesApi.GetUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserRoleResponse>("/api/userroles/{userid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListUserRoles: List user-roles Lists all user-roles and pages.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="page">Optional. Encoded page string returned from a previous search result that will retrieve              the next page of data. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ResourceListOfUserRoleResponse</returns>
        public ResourceListOfUserRoleResponse ListUserRoles(string? filter = default(string?), string? sortBy = default(string?), int? limit = default(int?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfUserRoleResponse> localVarResponse = ListUserRolesWithHttpInfo(filter, sortBy, limit, page, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListUserRoles: List user-roles Lists all user-roles and pages.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="page">Optional. Encoded page string returned from a previous search result that will retrieve              the next page of data. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of ResourceListOfUserRoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfUserRoleResponse> ListUserRolesWithHttpInfo(string? filter = default(string?), string? sortBy = default(string?), int? limit = default(int?), string? page = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "UserRolesApi.ListUserRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfUserRoleResponse>("/api/userroles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListUserRoles: List user-roles Lists all user-roles and pages.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="page">Optional. Encoded page string returned from a previous search result that will retrieve              the next page of data. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ResourceListOfUserRoleResponse</returns>
        public async System.Threading.Tasks.Task<ResourceListOfUserRoleResponse> ListUserRolesAsync(string? filter = default(string?), string? sortBy = default(string?), int? limit = default(int?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfUserRoleResponse> localVarResponse = await ListUserRolesWithHttpInfoAsync(filter, sortBy, limit, page, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListUserRoles: List user-roles Lists all user-roles and pages.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="page">Optional. Encoded page string returned from a previous search result that will retrieve              the next page of data. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfUserRoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfUserRoleResponse>> ListUserRolesWithHttpInfoAsync(string? filter = default(string?), string? sortBy = default(string?), int? limit = default(int?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "UserRolesApi.ListUserRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfUserRoleResponse>("/api/userroles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role Removes a policy collection from a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyCollectionScope">The scope of policy collection to remove from the User Role</param>
        /// <param name="policyCollectionCode">The code of the policy collection to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        public void RemovePolicyCollectionFromUserRole(string userid, string policyCollectionScope, string policyCollectionCode, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            RemovePolicyCollectionFromUserRoleWithHttpInfo(userid, policyCollectionScope, policyCollectionCode, opts: opts);
        }

        /// <summary>
        /// RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role Removes a policy collection from a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyCollectionScope">The scope of policy collection to remove from the User Role</param>
        /// <param name="policyCollectionCode">The code of the policy collection to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<Object> RemovePolicyCollectionFromUserRoleWithHttpInfo(string userid, string policyCollectionScope, string policyCollectionCode, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->RemovePolicyCollectionFromUserRole");
            }

            // verify the required parameter 'policyCollectionScope' is set
            if (policyCollectionScope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCollectionScope' when calling UserRolesApi->RemovePolicyCollectionFromUserRole");
            }

            // verify the required parameter 'policyCollectionCode' is set
            if (policyCollectionCode == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCollectionCode' when calling UserRolesApi->RemovePolicyCollectionFromUserRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyCollectionScope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policyCollectionScope)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyCollectionCode", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policyCollectionCode)); // path parameter

            localVarRequestOptions.Operation = "UserRolesApi.RemovePolicyCollectionFromUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/userroles/{userid}/policycollections/{policyCollectionScope}/{policyCollectionCode}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePolicyCollectionFromUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role Removes a policy collection from a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyCollectionScope">The scope of policy collection to remove from the User Role</param>
        /// <param name="policyCollectionCode">The code of the policy collection to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemovePolicyCollectionFromUserRoleAsync(string userid, string policyCollectionScope, string policyCollectionCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            await RemovePolicyCollectionFromUserRoleWithHttpInfoAsync(userid, policyCollectionScope, policyCollectionCode, operationIndex, cancellationToken, opts).ConfigureAwait(false);
        }

        /// <summary>
        /// RemovePolicyCollectionFromUserRole: Remove a policy collection from a user-role Removes a policy collection from a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyCollectionScope">The scope of policy collection to remove from the User Role</param>
        /// <param name="policyCollectionCode">The code of the policy collection to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> RemovePolicyCollectionFromUserRoleWithHttpInfoAsync(string userid, string policyCollectionScope, string policyCollectionCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->RemovePolicyCollectionFromUserRole");
            }

            // verify the required parameter 'policyCollectionScope' is set
            if (policyCollectionScope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCollectionScope' when calling UserRolesApi->RemovePolicyCollectionFromUserRole");
            }

            // verify the required parameter 'policyCollectionCode' is set
            if (policyCollectionCode == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCollectionCode' when calling UserRolesApi->RemovePolicyCollectionFromUserRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyCollectionScope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policyCollectionScope)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyCollectionCode", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policyCollectionCode)); // path parameter

            localVarRequestOptions.Operation = "UserRolesApi.RemovePolicyCollectionFromUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/userroles/{userid}/policycollections/{policyCollectionScope}/{policyCollectionCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePolicyCollectionFromUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RemovePolicyFromUserRole: Remove a policy from a user-role Removes a policy from a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyScope">The scope of the policy to remove from the User Role</param>
        /// <param name="policyCode">The code of the policy to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        public void RemovePolicyFromUserRole(string userid, string policyScope, string policyCode, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            RemovePolicyFromUserRoleWithHttpInfo(userid, policyScope, policyCode, opts: opts);
        }

        /// <summary>
        /// RemovePolicyFromUserRole: Remove a policy from a user-role Removes a policy from a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyScope">The scope of the policy to remove from the User Role</param>
        /// <param name="policyCode">The code of the policy to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<Object> RemovePolicyFromUserRoleWithHttpInfo(string userid, string policyScope, string policyCode, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->RemovePolicyFromUserRole");
            }

            // verify the required parameter 'policyScope' is set
            if (policyScope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyScope' when calling UserRolesApi->RemovePolicyFromUserRole");
            }

            // verify the required parameter 'policyCode' is set
            if (policyCode == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCode' when calling UserRolesApi->RemovePolicyFromUserRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyScope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policyScope)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyCode", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policyCode)); // path parameter

            localVarRequestOptions.Operation = "UserRolesApi.RemovePolicyFromUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/userroles/{userid}/policies/{policyScope}/{policyCode}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePolicyFromUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RemovePolicyFromUserRole: Remove a policy from a user-role Removes a policy from a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyScope">The scope of the policy to remove from the User Role</param>
        /// <param name="policyCode">The code of the policy to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemovePolicyFromUserRoleAsync(string userid, string policyScope, string policyCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            await RemovePolicyFromUserRoleWithHttpInfoAsync(userid, policyScope, policyCode, operationIndex, cancellationToken, opts).ConfigureAwait(false);
        }

        /// <summary>
        /// RemovePolicyFromUserRole: Remove a policy from a user-role Removes a policy from a user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the User Role to get</param>
        /// <param name="policyScope">The scope of the policy to remove from the User Role</param>
        /// <param name="policyCode">The code of the policy to remove from the User Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> RemovePolicyFromUserRoleWithHttpInfoAsync(string userid, string policyScope, string policyCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->RemovePolicyFromUserRole");
            }

            // verify the required parameter 'policyScope' is set
            if (policyScope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyScope' when calling UserRolesApi->RemovePolicyFromUserRole");
            }

            // verify the required parameter 'policyCode' is set
            if (policyCode == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyCode' when calling UserRolesApi->RemovePolicyFromUserRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyScope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policyScope)); // path parameter
            localVarRequestOptions.PathParameters.Add("policyCode", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policyCode)); // path parameter

            localVarRequestOptions.Operation = "UserRolesApi.RemovePolicyFromUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/userroles/{userid}/policies/{policyScope}/{policyCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePolicyFromUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateUserRole: Update a user-role Updates an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to be updated.</param>
        /// <param name="userRoleUpdateRequest">Definition of the update to apply to the user-role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>UserRoleResponse</returns>
        public UserRoleResponse UpdateUserRole(string userid, UserRoleUpdateRequest userRoleUpdateRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = UpdateUserRoleWithHttpInfo(userid, userRoleUpdateRequest, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateUserRole: Update a user-role Updates an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to be updated.</param>
        /// <param name="userRoleUpdateRequest">Definition of the update to apply to the user-role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of UserRoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> UpdateUserRoleWithHttpInfo(string userid, UserRoleUpdateRequest userRoleUpdateRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->UpdateUserRole");
            }

            // verify the required parameter 'userRoleUpdateRequest' is set
            if (userRoleUpdateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userRoleUpdateRequest' when calling UserRolesApi->UpdateUserRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = userRoleUpdateRequest;

            localVarRequestOptions.Operation = "UserRolesApi.UpdateUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserRoleResponse>("/api/userroles/{userid}/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateUserRole: Update a user-role Updates an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to be updated.</param>
        /// <param name="userRoleUpdateRequest">Definition of the update to apply to the user-role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of UserRoleResponse</returns>
        public async System.Threading.Tasks.Task<UserRoleResponse> UpdateUserRoleAsync(string userid, UserRoleUpdateRequest userRoleUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse> localVarResponse = await UpdateUserRoleWithHttpInfoAsync(userid, userRoleUpdateRequest, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateUserRole: Update a user-role Updates an identified user-role.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userid">Id of the user-role to be updated.</param>
        /// <param name="userRoleUpdateRequest">Definition of the update to apply to the user-role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (UserRoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<UserRoleResponse>> UpdateUserRoleWithHttpInfoAsync(string userid, UserRoleUpdateRequest userRoleUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'userid' is set
            if (userid == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userid' when calling UserRolesApi->UpdateUserRole");
            }

            // verify the required parameter 'userRoleUpdateRequest' is set
            if (userRoleUpdateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'userRoleUpdateRequest' when calling UserRolesApi->UpdateUserRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userid", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(userid)); // path parameter
            localVarRequestOptions.Data = userRoleUpdateRequest;

            localVarRequestOptions.Operation = "UserRolesApi.UpdateUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserRoleResponse>("/api/userroles/{userid}/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}