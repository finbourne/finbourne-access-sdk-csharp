/* 
 * FINBOURNE Access Management API
 *
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1105
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Finbourne.Access.Sdk.Client;
using Finbourne.Access.Sdk.Model;

namespace Finbourne.Access.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILicencesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Create a Licence
        /// </summary>
        /// <remarks>
        /// Creates an unassigned Licence policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenceCreationRequest">The Licence definition</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse CreateLicence (LicenceCreationRequest licenceCreationRequest);

        /// <summary>
        /// [EXPERIMENTAL] Create a Licence
        /// </summary>
        /// <remarks>
        /// Creates an unassigned Licence policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenceCreationRequest">The Licence definition</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> CreateLicenceWithHttpInfo (LicenceCreationRequest licenceCreationRequest);
        /// <summary>
        /// [EXPERIMENTAL] Assign Licence
        /// </summary>
        /// <remarks>
        /// Create a licence assignment to another, authorised, tenant
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse CreateLicenceAssignment (string code, string tenant);

        /// <summary>
        /// [EXPERIMENTAL] Assign Licence
        /// </summary>
        /// <remarks>
        /// Create a licence assignment to another, authorised, tenant
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> CreateLicenceAssignmentWithHttpInfo (string code, string tenant);
        /// <summary>
        /// [EXPERIMENTAL] Delete Licence
        /// </summary>
        /// <remarks>
        /// Deletes an identified Licence
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="scope">Optional. Will use the client name if not provided. The scope of the Licence (optional)</param>
        /// <returns></returns>
        void DeleteLicence (string code, string scope = null);

        /// <summary>
        /// [EXPERIMENTAL] Delete Licence
        /// </summary>
        /// <remarks>
        /// Deletes an identified Licence
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="scope">Optional. Will use the client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLicenceWithHttpInfo (string code, string scope = null);
        /// <summary>
        /// [EXPERIMENTAL] Unassign Licence
        /// </summary>
        /// <remarks>
        /// Remove a Licence assignment from a tenant
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns></returns>
        void DeleteLicenceAssignment (string code, string tenant);

        /// <summary>
        /// [EXPERIMENTAL] Unassign Licence
        /// </summary>
        /// <remarks>
        /// Remove a Licence assignment from a tenant
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLicenceAssignmentWithHttpInfo (string code, string tenant);
        /// <summary>
        /// [EXPERIMENTAL] Get Licence
        /// </summary>
        /// <remarks>
        /// Gets an identified Licence
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse GetLicence (string code, DateTimeOffset? asAt = null, string scope = null);

        /// <summary>
        /// [EXPERIMENTAL] Get Licence
        /// </summary>
        /// <remarks>
        /// Gets an identified Licence
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> GetLicenceWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null);
        /// <summary>
        /// [EXPERIMENTAL] List Assignments
        /// </summary>
        /// <remarks>
        /// List tenants the specified Licence is assigned to
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <returns>ICollection&lt;string&gt;</returns>
        ICollection<string> ListAssignments (string code);

        /// <summary>
        /// [EXPERIMENTAL] List Assignments
        /// </summary>
        /// <remarks>
        /// List tenants the specified Licence is assigned to
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <returns>ApiResponse of ICollection&lt;string&gt;</returns>
        ApiResponse<ICollection<string>> ListAssignmentsWithHttpInfo (string code);
        /// <summary>
        /// [EXPERIMENTAL] List Licences
        /// </summary>
        /// <remarks>
        /// Gets all Licences in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignedTo">Optional. If specified, applies a filter for only Licences that are assigned to the specified tenant (optional)</param>
        /// <returns>ICollection&lt;PolicyResponse&gt;</returns>
        ICollection<PolicyResponse> ListLicences (string assignedTo = null);

        /// <summary>
        /// [EXPERIMENTAL] List Licences
        /// </summary>
        /// <remarks>
        /// Gets all Licences in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignedTo">Optional. If specified, applies a filter for only Licences that are assigned to the specified tenant (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PolicyResponse&gt;</returns>
        ApiResponse<ICollection<PolicyResponse>> ListLicencesWithHttpInfo (string assignedTo = null);
        /// <summary>
        /// [EXPERIMENTAL] Update Licence
        /// </summary>
        /// <remarks>
        /// Update an existing Licence policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="licenceUpdateRequest">The Licence definition</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse UpdateLicence (string code, LicenceUpdateRequest licenceUpdateRequest);

        /// <summary>
        /// [EXPERIMENTAL] Update Licence
        /// </summary>
        /// <remarks>
        /// Update an existing Licence policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="licenceUpdateRequest">The Licence definition</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> UpdateLicenceWithHttpInfo (string code, LicenceUpdateRequest licenceUpdateRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Create a Licence
        /// </summary>
        /// <remarks>
        /// Creates an unassigned Licence policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenceCreationRequest">The Licence definition</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> CreateLicenceAsync (LicenceCreationRequest licenceCreationRequest);

        /// <summary>
        /// [EXPERIMENTAL] Create a Licence
        /// </summary>
        /// <remarks>
        /// Creates an unassigned Licence policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenceCreationRequest">The Licence definition</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreateLicenceAsyncWithHttpInfo (LicenceCreationRequest licenceCreationRequest);
        /// <summary>
        /// [EXPERIMENTAL] Assign Licence
        /// </summary>
        /// <remarks>
        /// Create a licence assignment to another, authorised, tenant
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> CreateLicenceAssignmentAsync (string code, string tenant);

        /// <summary>
        /// [EXPERIMENTAL] Assign Licence
        /// </summary>
        /// <remarks>
        /// Create a licence assignment to another, authorised, tenant
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreateLicenceAssignmentAsyncWithHttpInfo (string code, string tenant);
        /// <summary>
        /// [EXPERIMENTAL] Delete Licence
        /// </summary>
        /// <remarks>
        /// Deletes an identified Licence
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="scope">Optional. Will use the client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLicenceAsync (string code, string scope = null);

        /// <summary>
        /// [EXPERIMENTAL] Delete Licence
        /// </summary>
        /// <remarks>
        /// Deletes an identified Licence
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="scope">Optional. Will use the client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLicenceAsyncWithHttpInfo (string code, string scope = null);
        /// <summary>
        /// [EXPERIMENTAL] Unassign Licence
        /// </summary>
        /// <remarks>
        /// Remove a Licence assignment from a tenant
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLicenceAssignmentAsync (string code, string tenant);

        /// <summary>
        /// [EXPERIMENTAL] Unassign Licence
        /// </summary>
        /// <remarks>
        /// Remove a Licence assignment from a tenant
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLicenceAssignmentAsyncWithHttpInfo (string code, string tenant);
        /// <summary>
        /// [EXPERIMENTAL] Get Licence
        /// </summary>
        /// <remarks>
        /// Gets an identified Licence
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> GetLicenceAsync (string code, DateTimeOffset? asAt = null, string scope = null);

        /// <summary>
        /// [EXPERIMENTAL] Get Licence
        /// </summary>
        /// <remarks>
        /// Gets an identified Licence
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> GetLicenceAsyncWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null);
        /// <summary>
        /// [EXPERIMENTAL] List Assignments
        /// </summary>
        /// <remarks>
        /// List tenants the specified Licence is assigned to
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <returns>Task of ICollection&lt;string&gt;</returns>
        System.Threading.Tasks.Task<ICollection<string>> ListAssignmentsAsync (string code);

        /// <summary>
        /// [EXPERIMENTAL] List Assignments
        /// </summary>
        /// <remarks>
        /// List tenants the specified Licence is assigned to
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <returns>Task of ApiResponse (ICollection&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<string>>> ListAssignmentsAsyncWithHttpInfo (string code);
        /// <summary>
        /// [EXPERIMENTAL] List Licences
        /// </summary>
        /// <remarks>
        /// Gets all Licences in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignedTo">Optional. If specified, applies a filter for only Licences that are assigned to the specified tenant (optional)</param>
        /// <returns>Task of ICollection&lt;PolicyResponse&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PolicyResponse>> ListLicencesAsync (string assignedTo = null);

        /// <summary>
        /// [EXPERIMENTAL] List Licences
        /// </summary>
        /// <remarks>
        /// Gets all Licences in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignedTo">Optional. If specified, applies a filter for only Licences that are assigned to the specified tenant (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PolicyResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PolicyResponse>>> ListLicencesAsyncWithHttpInfo (string assignedTo = null);
        /// <summary>
        /// [EXPERIMENTAL] Update Licence
        /// </summary>
        /// <remarks>
        /// Update an existing Licence policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="licenceUpdateRequest">The Licence definition</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> UpdateLicenceAsync (string code, LicenceUpdateRequest licenceUpdateRequest);

        /// <summary>
        /// [EXPERIMENTAL] Update Licence
        /// </summary>
        /// <remarks>
        /// Update an existing Licence policy
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="licenceUpdateRequest">The Licence definition</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> UpdateLicenceAsyncWithHttpInfo (string code, LicenceUpdateRequest licenceUpdateRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LicencesApi : ILicencesApi
    {
        private Finbourne.Access.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LicencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LicencesApi(String basePath)
        {
            this.Configuration = new Finbourne.Access.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LicencesApi"/> class
        /// </summary>
        /// <returns></returns>
        public LicencesApi()
        {
            this.Configuration = Finbourne.Access.Sdk.Client.Configuration.Default;

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LicencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LicencesApi(Finbourne.Access.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Finbourne.Access.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Access.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EXPERIMENTAL] Create a Licence Creates an unassigned Licence policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenceCreationRequest">The Licence definition</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse CreateLicence (LicenceCreationRequest licenceCreationRequest)
        {
             ApiResponse<PolicyResponse> localVarResponse = CreateLicenceWithHttpInfo(licenceCreationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Create a Licence Creates an unassigned Licence policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenceCreationRequest">The Licence definition</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public ApiResponse< PolicyResponse > CreateLicenceWithHttpInfo (LicenceCreationRequest licenceCreationRequest)
        {
            // verify the required parameter 'licenceCreationRequest' is set
            if (licenceCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'licenceCreationRequest' when calling LicencesApi->CreateLicence");

            var localVarPath = "./api/licences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (licenceCreationRequest != null && licenceCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(licenceCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = licenceCreationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Create a Licence Creates an unassigned Licence policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenceCreationRequest">The Licence definition</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> CreateLicenceAsync (LicenceCreationRequest licenceCreationRequest)
        {
             ApiResponse<PolicyResponse> localVarResponse = await CreateLicenceAsyncWithHttpInfo(licenceCreationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Create a Licence Creates an unassigned Licence policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenceCreationRequest">The Licence definition</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreateLicenceAsyncWithHttpInfo (LicenceCreationRequest licenceCreationRequest)
        {
            // verify the required parameter 'licenceCreationRequest' is set
            if (licenceCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'licenceCreationRequest' when calling LicencesApi->CreateLicence");

            var localVarPath = "./api/licences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (licenceCreationRequest != null && licenceCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(licenceCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = licenceCreationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Assign Licence Create a licence assignment to another, authorised, tenant
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse CreateLicenceAssignment (string code, string tenant)
        {
             ApiResponse<PolicyResponse> localVarResponse = CreateLicenceAssignmentWithHttpInfo(code, tenant);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Assign Licence Create a licence assignment to another, authorised, tenant
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public ApiResponse< PolicyResponse > CreateLicenceAssignmentWithHttpInfo (string code, string tenant)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->CreateLicenceAssignment");
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new ApiException(400, "Missing required parameter 'tenant' when calling LicencesApi->CreateLicenceAssignment");

            var localVarPath = "./api/licences/{code}/assignments/{tenant}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (tenant != null) localVarPathParams.Add("tenant", this.Configuration.ApiClient.ParameterToString(tenant)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLicenceAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Assign Licence Create a licence assignment to another, authorised, tenant
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> CreateLicenceAssignmentAsync (string code, string tenant)
        {
             ApiResponse<PolicyResponse> localVarResponse = await CreateLicenceAssignmentAsyncWithHttpInfo(code, tenant);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Assign Licence Create a licence assignment to another, authorised, tenant
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreateLicenceAssignmentAsyncWithHttpInfo (string code, string tenant)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->CreateLicenceAssignment");
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new ApiException(400, "Missing required parameter 'tenant' when calling LicencesApi->CreateLicenceAssignment");

            var localVarPath = "./api/licences/{code}/assignments/{tenant}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (tenant != null) localVarPathParams.Add("tenant", this.Configuration.ApiClient.ParameterToString(tenant)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLicenceAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete Licence Deletes an identified Licence
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="scope">Optional. Will use the client name if not provided. The scope of the Licence (optional)</param>
        /// <returns></returns>
        public void DeleteLicence (string code, string scope = null)
        {
             DeleteLicenceWithHttpInfo(code, scope);
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete Licence Deletes an identified Licence
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="scope">Optional. Will use the client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLicenceWithHttpInfo (string code, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->DeleteLicence");

            var localVarPath = "./api/licences/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete Licence Deletes an identified Licence
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="scope">Optional. Will use the client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLicenceAsync (string code, string scope = null)
        {
             await DeleteLicenceAsyncWithHttpInfo(code, scope);

        }

        /// <summary>
        /// [EXPERIMENTAL] Delete Licence Deletes an identified Licence
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="scope">Optional. Will use the client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLicenceAsyncWithHttpInfo (string code, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->DeleteLicence");

            var localVarPath = "./api/licences/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EXPERIMENTAL] Unassign Licence Remove a Licence assignment from a tenant
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns></returns>
        public void DeleteLicenceAssignment (string code, string tenant)
        {
             DeleteLicenceAssignmentWithHttpInfo(code, tenant);
        }

        /// <summary>
        /// [EXPERIMENTAL] Unassign Licence Remove a Licence assignment from a tenant
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLicenceAssignmentWithHttpInfo (string code, string tenant)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->DeleteLicenceAssignment");
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new ApiException(400, "Missing required parameter 'tenant' when calling LicencesApi->DeleteLicenceAssignment");

            var localVarPath = "./api/licences/{code}/assignments/{tenant}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (tenant != null) localVarPathParams.Add("tenant", this.Configuration.ApiClient.ParameterToString(tenant)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLicenceAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EXPERIMENTAL] Unassign Licence Remove a Licence assignment from a tenant
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLicenceAssignmentAsync (string code, string tenant)
        {
             await DeleteLicenceAssignmentAsyncWithHttpInfo(code, tenant);

        }

        /// <summary>
        /// [EXPERIMENTAL] Unassign Licence Remove a Licence assignment from a tenant
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <param name="tenant">Name of the tenant to be shared with</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLicenceAssignmentAsyncWithHttpInfo (string code, string tenant)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->DeleteLicenceAssignment");
            // verify the required parameter 'tenant' is set
            if (tenant == null)
                throw new ApiException(400, "Missing required parameter 'tenant' when calling LicencesApi->DeleteLicenceAssignment");

            var localVarPath = "./api/licences/{code}/assignments/{tenant}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (tenant != null) localVarPathParams.Add("tenant", this.Configuration.ApiClient.ParameterToString(tenant)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLicenceAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Licence Gets an identified Licence
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse GetLicence (string code, DateTimeOffset? asAt = null, string scope = null)
        {
             ApiResponse<PolicyResponse> localVarResponse = GetLicenceWithHttpInfo(code, asAt, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Licence Gets an identified Licence
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public ApiResponse< PolicyResponse > GetLicenceWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->GetLicence");

            var localVarPath = "./api/licences/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Licence Gets an identified Licence
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> GetLicenceAsync (string code, DateTimeOffset? asAt = null, string scope = null)
        {
             ApiResponse<PolicyResponse> localVarResponse = await GetLicenceAsyncWithHttpInfo(code, asAt, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Get Licence Gets an identified Licence
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use the default client name if not provided. The scope of the Licence (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> GetLicenceAsyncWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->GetLicence");

            var localVarPath = "./api/licences/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List Assignments List tenants the specified Licence is assigned to
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <returns>ICollection&lt;string&gt;</returns>
        public ICollection<string> ListAssignments (string code)
        {
             ApiResponse<ICollection<string>> localVarResponse = ListAssignmentsWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] List Assignments List tenants the specified Licence is assigned to
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <returns>ApiResponse of ICollection&lt;string&gt;</returns>
        public ApiResponse< ICollection<string> > ListAssignmentsWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->ListAssignments");

            var localVarPath = "./api/licences/{code}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List Assignments List tenants the specified Licence is assigned to
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <returns>Task of ICollection&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<string>> ListAssignmentsAsync (string code)
        {
             ApiResponse<ICollection<string>> localVarResponse = await ListAssignmentsAsyncWithHttpInfo(code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] List Assignments List tenants the specified Licence is assigned to
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the Licence</param>
        /// <returns>Task of ApiResponse (ICollection&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<string>>> ListAssignmentsAsyncWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->ListAssignments");

            var localVarPath = "./api/licences/{code}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List Licences Gets all Licences in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignedTo">Optional. If specified, applies a filter for only Licences that are assigned to the specified tenant (optional)</param>
        /// <returns>ICollection&lt;PolicyResponse&gt;</returns>
        public ICollection<PolicyResponse> ListLicences (string assignedTo = null)
        {
             ApiResponse<ICollection<PolicyResponse>> localVarResponse = ListLicencesWithHttpInfo(assignedTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] List Licences Gets all Licences in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignedTo">Optional. If specified, applies a filter for only Licences that are assigned to the specified tenant (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PolicyResponse&gt;</returns>
        public ApiResponse< ICollection<PolicyResponse> > ListLicencesWithHttpInfo (string assignedTo = null)
        {

            var localVarPath = "./api/licences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assignedTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedTo", assignedTo)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLicences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PolicyResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<PolicyResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PolicyResponse>)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List Licences Gets all Licences in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignedTo">Optional. If specified, applies a filter for only Licences that are assigned to the specified tenant (optional)</param>
        /// <returns>Task of ICollection&lt;PolicyResponse&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PolicyResponse>> ListLicencesAsync (string assignedTo = null)
        {
             ApiResponse<ICollection<PolicyResponse>> localVarResponse = await ListLicencesAsyncWithHttpInfo(assignedTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] List Licences Gets all Licences in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignedTo">Optional. If specified, applies a filter for only Licences that are assigned to the specified tenant (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PolicyResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PolicyResponse>>> ListLicencesAsyncWithHttpInfo (string assignedTo = null)
        {

            var localVarPath = "./api/licences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assignedTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedTo", assignedTo)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLicences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PolicyResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<PolicyResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PolicyResponse>)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Update Licence Update an existing Licence policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="licenceUpdateRequest">The Licence definition</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse UpdateLicence (string code, LicenceUpdateRequest licenceUpdateRequest)
        {
             ApiResponse<PolicyResponse> localVarResponse = UpdateLicenceWithHttpInfo(code, licenceUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Update Licence Update an existing Licence policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="licenceUpdateRequest">The Licence definition</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public ApiResponse< PolicyResponse > UpdateLicenceWithHttpInfo (string code, LicenceUpdateRequest licenceUpdateRequest)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->UpdateLicence");
            // verify the required parameter 'licenceUpdateRequest' is set
            if (licenceUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'licenceUpdateRequest' when calling LicencesApi->UpdateLicence");

            var localVarPath = "./api/licences/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (licenceUpdateRequest != null && licenceUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(licenceUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = licenceUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Update Licence Update an existing Licence policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="licenceUpdateRequest">The Licence definition</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> UpdateLicenceAsync (string code, LicenceUpdateRequest licenceUpdateRequest)
        {
             ApiResponse<PolicyResponse> localVarResponse = await UpdateLicenceAsyncWithHttpInfo(code, licenceUpdateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Update Licence Update an existing Licence policy
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Licence</param>
        /// <param name="licenceUpdateRequest">The Licence definition</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> UpdateLicenceAsyncWithHttpInfo (string code, LicenceUpdateRequest licenceUpdateRequest)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling LicencesApi->UpdateLicence");
            // verify the required parameter 'licenceUpdateRequest' is set
            if (licenceUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'licenceUpdateRequest' when calling LicencesApi->UpdateLicence");

            var localVarPath = "./api/licences/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (licenceUpdateRequest != null && licenceUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(licenceUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = licenceUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1105";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyResponse)));
        }

    }
}