/*
 * FINBOURNE Access Management API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Object = System.Object;
using InvalidOperationException = System.InvalidOperationException;
using Exception = System.Exception;
using ArgumentNullException = System.ArgumentNullException;
using SystemEventHandler = System.EventHandler;
using DateTimeOffset = System.DateTimeOffset;
using Guid = System.Guid;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using IApiAccessor = Finbourne.Access.Sdk.Client.IApiAccessor;
using Finbourne.Access.Sdk.Extensions;
using Finbourne.Access.Sdk.Client.Auth;
using Finbourne.Access.Sdk.Model;

namespace Finbourne.Access.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// AddPolicyCollectionToRole: Add policy collections to a role
        /// </summary>
        /// <remarks>
        /// Assigns policy collections to a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        RoleResponse AddPolicyCollectionToRole(string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// AddPolicyCollectionToRole: Add policy collections to a role
        /// </summary>
        /// <remarks>
        /// Assigns policy collections to a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> AddPolicyCollectionToRoleWithHttpInfo(string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// CreateRole: Create Role
        /// </summary>
        /// <remarks>
        /// Creates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        RoleResponse CreateRole(RoleCreationRequest roleCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// CreateRole: Create Role
        /// </summary>
        /// <remarks>
        /// Creates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> CreateRoleWithHttpInfo(RoleCreationRequest roleCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// DeleteRole: Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        void DeleteRole(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// DeleteRole: Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<Object> DeleteRoleWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// GetRole: Get Role
        /// </summary>
        /// <remarks>
        /// Gets an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        RoleResponse GetRole(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// GetRole: Get Role
        /// </summary>
        /// <remarks>
        /// Gets an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> GetRoleWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// ListRoles: List Roles
        /// </summary>
        /// <remarks>
        /// Gets all Roles in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>List&lt;RoleResponse&gt;</returns>
        List<RoleResponse> ListRoles(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// ListRoles: List Roles
        /// </summary>
        /// <remarks>
        /// Gets all Roles in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of List&lt;RoleResponse&gt;</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<List<RoleResponse>> ListRolesWithHttpInfo(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// RemovePolicyCollectionFromRole: Remove policy collection from role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        RoleResponse RemovePolicyCollectionFromRole(string scope, string code, string policycollectionscope, string policycollectioncode, int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// RemovePolicyCollectionFromRole: Remove policy collection from role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> RemovePolicyCollectionFromRoleWithHttpInfo(string scope, string code, string policycollectionscope, string policycollectioncode, int operationIndex = 0, ConfigurationOptions? opts = null);
        /// <summary>
        /// UpdateRole: Update Role
        /// </summary>
        /// <remarks>
        /// Updates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        RoleResponse UpdateRole(string code, RoleUpdateRequest roleUpdateRequest, string? scope = default(string?), string? beforeScope = default(string?), string? beforeCode = default(string?), string? afterScope = default(string?), string? afterCode = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);

        /// <summary>
        /// UpdateRole: Update Role
        /// </summary>
        /// <remarks>
        /// Updates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> UpdateRoleWithHttpInfo(string code, RoleUpdateRequest roleUpdateRequest, string? scope = default(string?), string? beforeScope = default(string?), string? beforeCode = default(string?), string? afterScope = default(string?), string? afterCode = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// AddPolicyCollectionToRole: Add policy collections to a role
        /// </summary>
        /// <remarks>
        /// Assigns policy collections to a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> AddPolicyCollectionToRoleAsync(string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// AddPolicyCollectionToRole: Add policy collections to a role
        /// </summary>
        /// <remarks>
        /// Assigns policy collections to a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> AddPolicyCollectionToRoleWithHttpInfoAsync(string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// CreateRole: Create Role
        /// </summary>
        /// <remarks>
        /// Creates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> CreateRoleAsync(RoleCreationRequest roleCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// CreateRole: Create Role
        /// </summary>
        /// <remarks>
        /// Creates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> CreateRoleWithHttpInfoAsync(RoleCreationRequest roleCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// DeleteRole: Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoleAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// DeleteRole: Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> DeleteRoleWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// GetRole: Get Role
        /// </summary>
        /// <remarks>
        /// Gets an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> GetRoleAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// GetRole: Get Role
        /// </summary>
        /// <remarks>
        /// Gets an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> GetRoleWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// ListRoles: List Roles
        /// </summary>
        /// <remarks>
        /// Gets all Roles in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of List&lt;RoleResponse&gt;</returns>
        System.Threading.Tasks.Task<List<RoleResponse>> ListRolesAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// ListRoles: List Roles
        /// </summary>
        /// <remarks>
        /// Gets all Roles in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResponse&gt;)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<List<RoleResponse>>> ListRolesWithHttpInfoAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// RemovePolicyCollectionFromRole: Remove policy collection from role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> RemovePolicyCollectionFromRoleAsync(string scope, string code, string policycollectionscope, string policycollectioncode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// RemovePolicyCollectionFromRole: Remove policy collection from role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> RemovePolicyCollectionFromRoleWithHttpInfoAsync(string scope, string code, string policycollectionscope, string policycollectioncode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        /// <summary>
        /// UpdateRole: Update Role
        /// </summary>
        /// <remarks>
        /// Updates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> UpdateRoleAsync(string code, RoleUpdateRequest roleUpdateRequest, string? scope = default(string?), string? beforeScope = default(string?), string? beforeCode = default(string?), string? afterScope = default(string?), string? afterCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);

        /// <summary>
        /// UpdateRole: Update Role
        /// </summary>
        /// <remarks>
        /// Updates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> UpdateRoleWithHttpInfoAsync(string code, RoleUpdateRequest roleUpdateRequest, string? scope = default(string?), string? beforeScope = default(string?), string? beforeCode = default(string?), string? afterScope = default(string?), string? afterCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IRolesApiSync, IRolesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private Finbourne.Access.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(string basePath)
        {
            var globalConfiguration = Finbourne.Access.Sdk.Client.GlobalConfiguration.Instance;
            this.Configuration = Finbourne.Access.Sdk.Client.Configuration.MergeConfigurations(
                globalConfiguration,
                new Finbourne.Access.Sdk.Client.Configuration
                {
                    BasePath = basePath,
                    TimeoutMs = globalConfiguration.TimeoutMs,
                    RateLimitRetries = globalConfiguration.RateLimitRetries
                }
            );
            this.Client = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(Finbourne.Access.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RolesApi(Finbourne.Access.Sdk.Client.ISynchronousClient client, Finbourne.Access.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Access.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Access.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Access.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// AddPolicyCollectionToRole: Add policy collections to a role Assigns policy collections to a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse AddPolicyCollectionToRole(string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = AddPolicyCollectionToRoleWithHttpInfo(scope, code, addPolicyCollectionToRoleRequest, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AddPolicyCollectionToRole: Add policy collections to a role Assigns policy collections to a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> AddPolicyCollectionToRoleWithHttpInfo(string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling RolesApi->AddPolicyCollectionToRole");
            }

            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->AddPolicyCollectionToRole");
            }

            // verify the required parameter 'addPolicyCollectionToRoleRequest' is set
            if (addPolicyCollectionToRoleRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'addPolicyCollectionToRoleRequest' when calling RolesApi->AddPolicyCollectionToRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = addPolicyCollectionToRoleRequest;

            localVarRequestOptions.Operation = "RolesApi.AddPolicyCollectionToRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RoleResponse>("/api/roles/{scope}/{code}/policycollections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPolicyCollectionToRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// AddPolicyCollectionToRole: Add policy collections to a role Assigns policy collections to a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> AddPolicyCollectionToRoleAsync(string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = await AddPolicyCollectionToRoleWithHttpInfoAsync(scope, code, addPolicyCollectionToRoleRequest, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// AddPolicyCollectionToRole: Add policy collections to a role Assigns policy collections to a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> AddPolicyCollectionToRoleWithHttpInfoAsync(string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling RolesApi->AddPolicyCollectionToRole");
            }

            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->AddPolicyCollectionToRole");
            }

            // verify the required parameter 'addPolicyCollectionToRoleRequest' is set
            if (addPolicyCollectionToRoleRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'addPolicyCollectionToRoleRequest' when calling RolesApi->AddPolicyCollectionToRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = addPolicyCollectionToRoleRequest;

            localVarRequestOptions.Operation = "RolesApi.AddPolicyCollectionToRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RoleResponse>("/api/roles/{scope}/{code}/policycollections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPolicyCollectionToRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateRole: Create Role Creates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse CreateRole(RoleCreationRequest roleCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = CreateRoleWithHttpInfo(roleCreationRequest, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateRole: Create Role Creates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> CreateRoleWithHttpInfo(RoleCreationRequest roleCreationRequest, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'roleCreationRequest' is set
            if (roleCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'roleCreationRequest' when calling RolesApi->CreateRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = roleCreationRequest;

            localVarRequestOptions.Operation = "RolesApi.CreateRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RoleResponse>("/api/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// CreateRole: Create Role Creates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> CreateRoleAsync(RoleCreationRequest roleCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = await CreateRoleWithHttpInfoAsync(roleCreationRequest, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CreateRole: Create Role Creates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> CreateRoleWithHttpInfoAsync(RoleCreationRequest roleCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'roleCreationRequest' is set
            if (roleCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'roleCreationRequest' when calling RolesApi->CreateRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = roleCreationRequest;

            localVarRequestOptions.Operation = "RolesApi.CreateRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RoleResponse>("/api/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteRole: Delete Role Deletes an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns></returns>
        public void DeleteRole(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            DeleteRoleWithHttpInfo(code, scope, opts: opts);
        }

        /// <summary>
        /// DeleteRole: Delete Role Deletes an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<Object> DeleteRoleWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->DeleteRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {

                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "RolesApi.DeleteRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/roles/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DeleteRole: Delete Role Deletes an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoleAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            await DeleteRoleWithHttpInfoAsync(code, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
        }

        /// <summary>
        /// DeleteRole: Delete Role Deletes an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> DeleteRoleWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->DeleteRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "RolesApi.DeleteRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/roles/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetRole: Get Role Gets an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse GetRole(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = GetRoleWithHttpInfo(code, scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetRole: Get Role Gets an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> GetRoleWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->GetRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {

                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "RolesApi.GetRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoleResponse>("/api/roles/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetRole: Get Role Gets an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> GetRoleAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = await GetRoleWithHttpInfoAsync(code, scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetRole: Get Role Gets an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> GetRoleWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->GetRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "RolesApi.GetRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RoleResponse>("/api/roles/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListRoles: List Roles Gets all Roles in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>List&lt;RoleResponse&gt;</returns>
        public List<RoleResponse> ListRoles(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<List<RoleResponse>> localVarResponse = ListRolesWithHttpInfo(scope, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListRoles: List Roles Gets all Roles in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of List&lt;RoleResponse&gt;</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<List<RoleResponse>> ListRolesWithHttpInfo(string? scope = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {

                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "RolesApi.ListRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RoleResponse>>("/api/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ListRoles: List Roles Gets all Roles in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of List&lt;RoleResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<RoleResponse>> ListRolesAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<List<RoleResponse>> localVarResponse = await ListRolesWithHttpInfoAsync(scope, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ListRoles: List Roles Gets all Roles in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<List<RoleResponse>>> ListRolesWithHttpInfoAsync(string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "RolesApi.ListRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RoleResponse>>("/api/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RemovePolicyCollectionFromRole: Remove policy collection from role Removes a policy collection from a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse RemovePolicyCollectionFromRole(string scope, string code, string policycollectionscope, string policycollectioncode, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = RemovePolicyCollectionFromRoleWithHttpInfo(scope, code, policycollectionscope, policycollectioncode, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RemovePolicyCollectionFromRole: Remove policy collection from role Removes a policy collection from a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> RemovePolicyCollectionFromRoleWithHttpInfo(string scope, string code, string policycollectionscope, string policycollectioncode, int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling RolesApi->RemovePolicyCollectionFromRole");
            }

            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->RemovePolicyCollectionFromRole");
            }

            // verify the required parameter 'policycollectionscope' is set
            if (policycollectionscope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policycollectionscope' when calling RolesApi->RemovePolicyCollectionFromRole");
            }

            // verify the required parameter 'policycollectioncode' is set
            if (policycollectioncode == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policycollectioncode' when calling RolesApi->RemovePolicyCollectionFromRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("policycollectionscope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policycollectionscope)); // path parameter
            localVarRequestOptions.PathParameters.Add("policycollectioncode", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policycollectioncode)); // path parameter

            localVarRequestOptions.Operation = "RolesApi.RemovePolicyCollectionFromRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RoleResponse>("/api/roles/{scope}/{code}/policycollections/{policycollectionscope}/{policycollectioncode}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePolicyCollectionFromRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RemovePolicyCollectionFromRole: Remove policy collection from role Removes a policy collection from a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> RemovePolicyCollectionFromRoleAsync(string scope, string code, string policycollectionscope, string policycollectioncode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = await RemovePolicyCollectionFromRoleWithHttpInfoAsync(scope, code, policycollectionscope, policycollectioncode, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RemovePolicyCollectionFromRole: Remove policy collection from role Removes a policy collection from a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> RemovePolicyCollectionFromRoleWithHttpInfoAsync(string scope, string code, string policycollectionscope, string policycollectioncode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling RolesApi->RemovePolicyCollectionFromRole");
            }

            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->RemovePolicyCollectionFromRole");
            }

            // verify the required parameter 'policycollectionscope' is set
            if (policycollectionscope == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policycollectionscope' when calling RolesApi->RemovePolicyCollectionFromRole");
            }

            // verify the required parameter 'policycollectioncode' is set
            if (policycollectioncode == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policycollectioncode' when calling RolesApi->RemovePolicyCollectionFromRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.PathParameters.Add("policycollectionscope", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policycollectionscope)); // path parameter
            localVarRequestOptions.PathParameters.Add("policycollectioncode", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(policycollectioncode)); // path parameter

            localVarRequestOptions.Operation = "RolesApi.RemovePolicyCollectionFromRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RoleResponse>("/api/roles/{scope}/{code}/policycollections/{policycollectionscope}/{policycollectioncode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePolicyCollectionFromRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateRole: Update Role Updates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse UpdateRole(string code, RoleUpdateRequest roleUpdateRequest, string? scope = default(string?), string? beforeScope = default(string?), string? beforeCode = default(string?), string? afterScope = default(string?), string? afterCode = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = UpdateRoleWithHttpInfo(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode, opts: opts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateRole: Update Role Updates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> UpdateRoleWithHttpInfo(string code, RoleUpdateRequest roleUpdateRequest, string? scope = default(string?), string? beforeScope = default(string?), string? beforeCode = default(string?), string? afterScope = default(string?), string? afterCode = default(string?), int operationIndex = 0, ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->UpdateRole");
            }

            // verify the required parameter 'roleUpdateRequest' is set
            if (roleUpdateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'roleUpdateRequest' when calling RolesApi->UpdateRole");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {

                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            if (beforeScope != null)
            {

                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "beforeScope", beforeScope));
            }
            if (beforeCode != null)
            {

                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "beforeCode", beforeCode));
            }
            if (afterScope != null)
            {

                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "afterScope", afterScope));
            }
            if (afterCode != null)
            {

                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "afterCode", afterCode));
            }
            localVarRequestOptions.Data = roleUpdateRequest;

            localVarRequestOptions.Operation = "RolesApi.UpdateRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RoleResponse>("/api/roles/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UpdateRole: Update Role Updates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> UpdateRoleAsync(string code, RoleUpdateRequest roleUpdateRequest, string? scope = default(string?), string? beforeScope = default(string?), string? beforeCode = default(string?), string? afterScope = default(string?), string? afterCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse> localVarResponse = await UpdateRoleWithHttpInfoAsync(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode, operationIndex, cancellationToken, opts).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateRole: Update Role Updates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <param name="opts">Options for this request.</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<RoleResponse>> UpdateRoleWithHttpInfoAsync(string code, RoleUpdateRequest roleUpdateRequest, string? scope = default(string?), string? beforeScope = default(string?), string? beforeCode = default(string?), string? afterScope = default(string?), string? afterCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ConfigurationOptions? opts = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling RolesApi->UpdateRole");
            }

            // verify the required parameter 'roleUpdateRequest' is set
            if (roleUpdateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'roleUpdateRequest' when calling RolesApi->UpdateRole");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            if (opts is { TimeoutMs: not null })
            {
                localVarRequestOptions.TimeoutMs = opts.TimeoutMs.Value;
            }
            
            if (opts is { RateLimitRetries: not null })
            {
                localVarRequestOptions.RateLimitRetries = opts.RateLimitRetries.Value;
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            if (beforeScope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "beforeScope", beforeScope));
            }
            if (beforeCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "beforeCode", beforeCode));
            }
            if (afterScope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "afterScope", afterScope));
            }
            if (afterCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "afterCode", afterCode));
            }
            localVarRequestOptions.Data = roleUpdateRequest;

            localVarRequestOptions.Operation = "RolesApi.UpdateRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RoleResponse>("/api/roles/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}