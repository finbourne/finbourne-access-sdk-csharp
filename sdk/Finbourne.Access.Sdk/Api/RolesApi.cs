/* 
 * FINBOURNE Access Management API
 *
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1085
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Finbourne.Access.Sdk.Client;
using Finbourne.Access.Sdk.Model;

namespace Finbourne.Access.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Add policy collections to a role
        /// </summary>
        /// <remarks>
        /// Assigns policy collections to a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <returns>RoleResponse</returns>
        RoleResponse AddPolicyCollectionToRole (string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest);

        /// <summary>
        /// [EXPERIMENTAL] Add policy collections to a role
        /// </summary>
        /// <remarks>
        /// Assigns policy collections to a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        ApiResponse<RoleResponse> AddPolicyCollectionToRoleWithHttpInfo (string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest);
        /// <summary>
        /// [EARLY ACCESS] Create Role
        /// </summary>
        /// <remarks>
        /// Creates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <returns>RoleResponse</returns>
        RoleResponse CreateRole (RoleCreationRequest roleCreationRequest);

        /// <summary>
        /// [EARLY ACCESS] Create Role
        /// </summary>
        /// <remarks>
        /// Creates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        ApiResponse<RoleResponse> CreateRoleWithHttpInfo (RoleCreationRequest roleCreationRequest);
        /// <summary>
        /// [EARLY ACCESS] Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns></returns>
        void DeleteRole (string code, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoleWithHttpInfo (string code, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Get Role
        /// </summary>
        /// <remarks>
        /// Gets an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>RoleResponse</returns>
        RoleResponse GetRole (string code, DateTimeOffset? asAt = null, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Get Role
        /// </summary>
        /// <remarks>
        /// Gets an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        ApiResponse<RoleResponse> GetRoleWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] List Roles
        /// </summary>
        /// <remarks>
        /// Gets all Roles in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ICollection&lt;RoleResponse&gt;</returns>
        ICollection<RoleResponse> ListRoles (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [EARLY ACCESS] List Roles
        /// </summary>
        /// <remarks>
        /// Gets all Roles in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;RoleResponse&gt;</returns>
        ApiResponse<ICollection<RoleResponse>> ListRolesWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [EXPERIMENTAL] Remove policy collection from role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <returns>RoleResponse</returns>
        RoleResponse RemovePolicyCollectionFromRole (string scope, string code, string policycollectionscope, string policycollectioncode);

        /// <summary>
        /// [EXPERIMENTAL] Remove policy collection from role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        ApiResponse<RoleResponse> RemovePolicyCollectionFromRoleWithHttpInfo (string scope, string code, string policycollectionscope, string policycollectioncode);
        /// <summary>
        /// [EARLY ACCESS] Update Role
        /// </summary>
        /// <remarks>
        /// Updates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <returns>RoleResponse</returns>
        RoleResponse UpdateRole (string code, RoleUpdateRequest roleUpdateRequest, string scope = null, string beforeScope = null, string beforeCode = null, string afterScope = null, string afterCode = null);

        /// <summary>
        /// [EARLY ACCESS] Update Role
        /// </summary>
        /// <remarks>
        /// Updates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        ApiResponse<RoleResponse> UpdateRoleWithHttpInfo (string code, RoleUpdateRequest roleUpdateRequest, string scope = null, string beforeScope = null, string beforeCode = null, string afterScope = null, string afterCode = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Add policy collections to a role
        /// </summary>
        /// <remarks>
        /// Assigns policy collections to a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> AddPolicyCollectionToRoleAsync (string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest);

        /// <summary>
        /// [EXPERIMENTAL] Add policy collections to a role
        /// </summary>
        /// <remarks>
        /// Assigns policy collections to a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResponse>> AddPolicyCollectionToRoleAsyncWithHttpInfo (string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest);
        /// <summary>
        /// [EARLY ACCESS] Create Role
        /// </summary>
        /// <remarks>
        /// Creates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> CreateRoleAsync (RoleCreationRequest roleCreationRequest);

        /// <summary>
        /// [EARLY ACCESS] Create Role
        /// </summary>
        /// <remarks>
        /// Creates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResponse>> CreateRoleAsyncWithHttpInfo (RoleCreationRequest roleCreationRequest);
        /// <summary>
        /// [EARLY ACCESS] Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoleAsync (string code, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (string code, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] Get Role
        /// </summary>
        /// <remarks>
        /// Gets an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> GetRoleAsync (string code, DateTimeOffset? asAt = null, string scope = null);

        /// <summary>
        /// [EARLY ACCESS] Get Role
        /// </summary>
        /// <remarks>
        /// Gets an identified Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResponse>> GetRoleAsyncWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null);
        /// <summary>
        /// [EARLY ACCESS] List Roles
        /// </summary>
        /// <remarks>
        /// Gets all Roles in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ICollection&lt;RoleResponse&gt;</returns>
        System.Threading.Tasks.Task<ICollection<RoleResponse>> ListRolesAsync (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [EARLY ACCESS] List Roles
        /// </summary>
        /// <remarks>
        /// Gets all Roles in a scope
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;RoleResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<RoleResponse>>> ListRolesAsyncWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [EXPERIMENTAL] Remove policy collection from role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> RemovePolicyCollectionFromRoleAsync (string scope, string code, string policycollectionscope, string policycollectioncode);

        /// <summary>
        /// [EXPERIMENTAL] Remove policy collection from role
        /// </summary>
        /// <remarks>
        /// Removes a policy collection from a role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResponse>> RemovePolicyCollectionFromRoleAsyncWithHttpInfo (string scope, string code, string policycollectionscope, string policycollectioncode);
        /// <summary>
        /// [EARLY ACCESS] Update Role
        /// </summary>
        /// <remarks>
        /// Updates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> UpdateRoleAsync (string code, RoleUpdateRequest roleUpdateRequest, string scope = null, string beforeScope = null, string beforeCode = null, string afterScope = null, string afterCode = null);

        /// <summary>
        /// [EARLY ACCESS] Update Role
        /// </summary>
        /// <remarks>
        /// Updates a Role
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResponse>> UpdateRoleAsyncWithHttpInfo (string code, RoleUpdateRequest roleUpdateRequest, string scope = null, string beforeScope = null, string beforeCode = null, string afterScope = null, string afterCode = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private Finbourne.Access.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(String basePath)
        {
            this.Configuration = new Finbourne.Access.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// </summary>
        /// <returns></returns>
        public RolesApi()
        {
            this.Configuration = Finbourne.Access.Sdk.Client.Configuration.Default;

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(Finbourne.Access.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Finbourne.Access.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Access.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EXPERIMENTAL] Add policy collections to a role Assigns policy collections to a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse AddPolicyCollectionToRole (string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest)
        {
             ApiResponse<RoleResponse> localVarResponse = AddPolicyCollectionToRoleWithHttpInfo(scope, code, addPolicyCollectionToRoleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Add policy collections to a role Assigns policy collections to a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public ApiResponse< RoleResponse > AddPolicyCollectionToRoleWithHttpInfo (string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling RolesApi->AddPolicyCollectionToRole");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->AddPolicyCollectionToRole");
            // verify the required parameter 'addPolicyCollectionToRoleRequest' is set
            if (addPolicyCollectionToRoleRequest == null)
                throw new ApiException(400, "Missing required parameter 'addPolicyCollectionToRoleRequest' when calling RolesApi->AddPolicyCollectionToRole");

            var localVarPath = "./api/roles/{scope}/{code}/policycollections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (addPolicyCollectionToRoleRequest != null && addPolicyCollectionToRoleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addPolicyCollectionToRoleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addPolicyCollectionToRoleRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPolicyCollectionToRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Add policy collections to a role Assigns policy collections to a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> AddPolicyCollectionToRoleAsync (string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest)
        {
             ApiResponse<RoleResponse> localVarResponse = await AddPolicyCollectionToRoleAsyncWithHttpInfo(scope, code, addPolicyCollectionToRoleRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Add policy collections to a role Assigns policy collections to a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="addPolicyCollectionToRoleRequest">The policy collections to add</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResponse>> AddPolicyCollectionToRoleAsyncWithHttpInfo (string scope, string code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling RolesApi->AddPolicyCollectionToRole");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->AddPolicyCollectionToRole");
            // verify the required parameter 'addPolicyCollectionToRoleRequest' is set
            if (addPolicyCollectionToRoleRequest == null)
                throw new ApiException(400, "Missing required parameter 'addPolicyCollectionToRoleRequest' when calling RolesApi->AddPolicyCollectionToRole");

            var localVarPath = "./api/roles/{scope}/{code}/policycollections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (addPolicyCollectionToRoleRequest != null && addPolicyCollectionToRoleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addPolicyCollectionToRoleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addPolicyCollectionToRoleRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPolicyCollectionToRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Create Role Creates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse CreateRole (RoleCreationRequest roleCreationRequest)
        {
             ApiResponse<RoleResponse> localVarResponse = CreateRoleWithHttpInfo(roleCreationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Create Role Creates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public ApiResponse< RoleResponse > CreateRoleWithHttpInfo (RoleCreationRequest roleCreationRequest)
        {
            // verify the required parameter 'roleCreationRequest' is set
            if (roleCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'roleCreationRequest' when calling RolesApi->CreateRole");

            var localVarPath = "./api/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleCreationRequest != null && roleCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(roleCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleCreationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Create Role Creates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> CreateRoleAsync (RoleCreationRequest roleCreationRequest)
        {
             ApiResponse<RoleResponse> localVarResponse = await CreateRoleAsyncWithHttpInfo(roleCreationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Create Role Creates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleCreationRequest">The definition of the Role</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResponse>> CreateRoleAsyncWithHttpInfo (RoleCreationRequest roleCreationRequest)
        {
            // verify the required parameter 'roleCreationRequest' is set
            if (roleCreationRequest == null)
                throw new ApiException(400, "Missing required parameter 'roleCreationRequest' when calling RolesApi->CreateRole");

            var localVarPath = "./api/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleCreationRequest != null && roleCreationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(roleCreationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleCreationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Delete Role Deletes an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns></returns>
        public void DeleteRole (string code, string scope = null)
        {
             DeleteRoleWithHttpInfo(code, scope);
        }

        /// <summary>
        /// [EARLY ACCESS] Delete Role Deletes an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRoleWithHttpInfo (string code, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->DeleteRole");

            var localVarPath = "./api/roles/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EARLY ACCESS] Delete Role Deletes an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoleAsync (string code, string scope = null)
        {
             await DeleteRoleAsyncWithHttpInfo(code, scope);

        }

        /// <summary>
        /// [EARLY ACCESS] Delete Role Deletes an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (string code, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->DeleteRole");

            var localVarPath = "./api/roles/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EARLY ACCESS] Get Role Gets an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse GetRole (string code, DateTimeOffset? asAt = null, string scope = null)
        {
             ApiResponse<RoleResponse> localVarResponse = GetRoleWithHttpInfo(code, asAt, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Get Role Gets an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public ApiResponse< RoleResponse > GetRoleWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->GetRole");

            var localVarPath = "./api/roles/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Get Role Gets an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> GetRoleAsync (string code, DateTimeOffset? asAt = null, string scope = null)
        {
             ApiResponse<RoleResponse> localVarResponse = await GetRoleAsyncWithHttpInfo(code, asAt, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Get Role Gets an identified Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="scope">Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResponse>> GetRoleAsyncWithHttpInfo (string code, DateTimeOffset? asAt = null, string scope = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->GetRole");

            var localVarPath = "./api/roles/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] List Roles Gets all Roles in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ICollection&lt;RoleResponse&gt;</returns>
        public ICollection<RoleResponse> ListRoles (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<ICollection<RoleResponse>> localVarResponse = ListRolesWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] List Roles Gets all Roles in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;RoleResponse&gt;</returns>
        public ApiResponse< ICollection<RoleResponse> > ListRolesWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<RoleResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<RoleResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResponse>)));
        }

        /// <summary>
        /// [EARLY ACCESS] List Roles Gets all Roles in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ICollection&lt;RoleResponse&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<RoleResponse>> ListRolesAsync (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<ICollection<RoleResponse>> localVarResponse = await ListRolesAsyncWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] List Roles Gets all Roles in a scope
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional. Will use all scopes if not supplied. The requested scope (optional)</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;RoleResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<RoleResponse>>> ListRolesAsyncWithHttpInfo (string scope = null, DateTimeOffset? asAt = null, List<string> sortBy = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<RoleResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<RoleResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResponse>)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Remove policy collection from role Removes a policy collection from a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse RemovePolicyCollectionFromRole (string scope, string code, string policycollectionscope, string policycollectioncode)
        {
             ApiResponse<RoleResponse> localVarResponse = RemovePolicyCollectionFromRoleWithHttpInfo(scope, code, policycollectionscope, policycollectioncode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Remove policy collection from role Removes a policy collection from a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public ApiResponse< RoleResponse > RemovePolicyCollectionFromRoleWithHttpInfo (string scope, string code, string policycollectionscope, string policycollectioncode)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling RolesApi->RemovePolicyCollectionFromRole");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->RemovePolicyCollectionFromRole");
            // verify the required parameter 'policycollectionscope' is set
            if (policycollectionscope == null)
                throw new ApiException(400, "Missing required parameter 'policycollectionscope' when calling RolesApi->RemovePolicyCollectionFromRole");
            // verify the required parameter 'policycollectioncode' is set
            if (policycollectioncode == null)
                throw new ApiException(400, "Missing required parameter 'policycollectioncode' when calling RolesApi->RemovePolicyCollectionFromRole");

            var localVarPath = "./api/roles/{scope}/{code}/policycollections/{policycollectionscope}/{policycollectioncode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (policycollectionscope != null) localVarPathParams.Add("policycollectionscope", this.Configuration.ApiClient.ParameterToString(policycollectionscope)); // path parameter
            if (policycollectioncode != null) localVarPathParams.Add("policycollectioncode", this.Configuration.ApiClient.ParameterToString(policycollectioncode)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePolicyCollectionFromRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Remove policy collection from role Removes a policy collection from a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> RemovePolicyCollectionFromRoleAsync (string scope, string code, string policycollectionscope, string policycollectioncode)
        {
             ApiResponse<RoleResponse> localVarResponse = await RemovePolicyCollectionFromRoleAsyncWithHttpInfo(scope, code, policycollectionscope, policycollectioncode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Remove policy collection from role Removes a policy collection from a role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Role</param>
        /// <param name="code">The code of the Role</param>
        /// <param name="policycollectionscope">The scope of policy collection to remove from the Role</param>
        /// <param name="policycollectioncode">The code of the policy collection to remove from the Role</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResponse>> RemovePolicyCollectionFromRoleAsyncWithHttpInfo (string scope, string code, string policycollectionscope, string policycollectioncode)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling RolesApi->RemovePolicyCollectionFromRole");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->RemovePolicyCollectionFromRole");
            // verify the required parameter 'policycollectionscope' is set
            if (policycollectionscope == null)
                throw new ApiException(400, "Missing required parameter 'policycollectionscope' when calling RolesApi->RemovePolicyCollectionFromRole");
            // verify the required parameter 'policycollectioncode' is set
            if (policycollectioncode == null)
                throw new ApiException(400, "Missing required parameter 'policycollectioncode' when calling RolesApi->RemovePolicyCollectionFromRole");

            var localVarPath = "./api/roles/{scope}/{code}/policycollections/{policycollectionscope}/{policycollectioncode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (policycollectionscope != null) localVarPathParams.Add("policycollectionscope", this.Configuration.ApiClient.ParameterToString(policycollectionscope)); // path parameter
            if (policycollectioncode != null) localVarPathParams.Add("policycollectioncode", this.Configuration.ApiClient.ParameterToString(policycollectioncode)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePolicyCollectionFromRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Update Role Updates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse UpdateRole (string code, RoleUpdateRequest roleUpdateRequest, string scope = null, string beforeScope = null, string beforeCode = null, string afterScope = null, string afterCode = null)
        {
             ApiResponse<RoleResponse> localVarResponse = UpdateRoleWithHttpInfo(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Update Role Updates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public ApiResponse< RoleResponse > UpdateRoleWithHttpInfo (string code, RoleUpdateRequest roleUpdateRequest, string scope = null, string beforeScope = null, string beforeCode = null, string afterScope = null, string afterCode = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->UpdateRole");
            // verify the required parameter 'roleUpdateRequest' is set
            if (roleUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'roleUpdateRequest' when calling RolesApi->UpdateRole");

            var localVarPath = "./api/roles/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (beforeScope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeScope", beforeScope)); // query parameter
            if (beforeCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeCode", beforeCode)); // query parameter
            if (afterScope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "afterScope", afterScope)); // query parameter
            if (afterCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "afterCode", afterCode)); // query parameter
            if (roleUpdateRequest != null && roleUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(roleUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

        /// <summary>
        /// [EARLY ACCESS] Update Role Updates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> UpdateRoleAsync (string code, RoleUpdateRequest roleUpdateRequest, string scope = null, string beforeScope = null, string beforeCode = null, string afterScope = null, string afterCode = null)
        {
             ApiResponse<RoleResponse> localVarResponse = await UpdateRoleAsyncWithHttpInfo(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Update Role Updates a Role
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Role</param>
        /// <param name="roleUpdateRequest">The updated definition of the Role</param>
        /// <param name="scope">&gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)</param>
        /// <param name="beforeScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="beforeCode">Optional. The code of the Role (optional)</param>
        /// <param name="afterScope">Optional. The scope of the Role. Will use default scope if not supplied. (optional)</param>
        /// <param name="afterCode">Optional. The code of the Role (optional)</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResponse>> UpdateRoleAsyncWithHttpInfo (string code, RoleUpdateRequest roleUpdateRequest, string scope = null, string beforeScope = null, string beforeCode = null, string afterScope = null, string afterCode = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling RolesApi->UpdateRole");
            // verify the required parameter 'roleUpdateRequest' is set
            if (roleUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'roleUpdateRequest' when calling RolesApi->UpdateRole");

            var localVarPath = "./api/roles/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (beforeScope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeScope", beforeScope)); // query parameter
            if (beforeCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeCode", beforeCode)); // query parameter
            if (afterScope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "afterScope", afterScope)); // query parameter
            if (afterCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "afterCode", afterCode)); // query parameter
            if (roleUpdateRequest != null && roleUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(roleUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleUpdateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.0.1085";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RoleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
        }

    }
}