/*
 * FINBOURNE Access Management API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Object = System.Object;
using InvalidOperationException = System.InvalidOperationException;
using Exception = System.Exception;
using ArgumentNullException = System.ArgumentNullException;
using SystemEventHandler = System.EventHandler;
using DateTimeOffset = System.DateTimeOffset;
using Guid = System.Guid;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Access.Sdk.Client;
using Finbourne.Access.Sdk.Client.Auth;
using Finbourne.Access.Sdk.Model;

namespace Finbourne.Access.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPolicyTemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template
        /// </summary>
        /// <remarks>
        /// Creates a Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyTemplateCreationRequest">The definition of the policy template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PolicyTemplateResponse</returns>
        PolicyTemplateResponse CreatePolicyTemplate(PolicyTemplateCreationRequest policyTemplateCreationRequest, int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template
        /// </summary>
        /// <remarks>
        /// Creates a Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyTemplateCreationRequest">The definition of the policy template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PolicyTemplateResponse</returns>
        ApiResponse<PolicyTemplateResponse> CreatePolicyTemplateWithHttpInfo(PolicyTemplateCreationRequest policyTemplateCreationRequest, int operationIndex = 0);
        /// <summary>
        /// [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePolicyTemplate(string code, string? scope = default(string?), int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyTemplateWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0);
        /// <summary>
        /// [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template
        /// </summary>
        /// <remarks>
        /// Generates policies from templates
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generatePolicyFromTemplateRequest">Definition of the generate request</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GeneratedPolicyComponents</returns>
        GeneratedPolicyComponents GeneratePolicyFromTemplate(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template
        /// </summary>
        /// <remarks>
        /// Generates policies from templates
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generatePolicyFromTemplateRequest">Definition of the generate request</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GeneratedPolicyComponents</returns>
        ApiResponse<GeneratedPolicyComponents> GeneratePolicyFromTemplateWithHttpInfo(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0);
        /// <summary>
        /// [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="asAt">Optional. The AsAt date time of the data. If not specified defaults to current time (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PolicyTemplateResponse</returns>
        PolicyTemplateResponse GetPolicyTemplate(string code, DateTimeOffset? asAt = default(DateTimeOffset?), string? scope = default(string?), int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="asAt">Optional. The AsAt date time of the data. If not specified defaults to current time (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PolicyTemplateResponse</returns>
        ApiResponse<PolicyTemplateResponse> GetPolicyTemplateWithHttpInfo(string code, DateTimeOffset? asAt = default(DateTimeOffset?), string? scope = default(string?), int operationIndex = 0);
        /// <summary>
        /// [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates
        /// </summary>
        /// <remarks>
        /// Gets all Policy Templates with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceListOfPolicyTemplateResponse</returns>
        ResourceListOfPolicyTemplateResponse ListPolicyTemplates(DateTimeOffset? asAt = default(DateTimeOffset?), string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates
        /// </summary>
        /// <remarks>
        /// Gets all Policy Templates with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceListOfPolicyTemplateResponse</returns>
        ApiResponse<ResourceListOfPolicyTemplateResponse> ListPolicyTemplatesWithHttpInfo(DateTimeOffset? asAt = default(DateTimeOffset?), string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0);
        /// <summary>
        /// [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template
        /// </summary>
        /// <remarks>
        /// Updates an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the policy template to update</param>
        /// <param name="policyTemplateUpdateRequest">Definition of the updated policy template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PolicyTemplateResponse</returns>
        PolicyTemplateResponse UpdatePolicyTemplate(string code, PolicyTemplateUpdateRequest? policyTemplateUpdateRequest = default(PolicyTemplateUpdateRequest?), int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template
        /// </summary>
        /// <remarks>
        /// Updates an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the policy template to update</param>
        /// <param name="policyTemplateUpdateRequest">Definition of the updated policy template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PolicyTemplateResponse</returns>
        ApiResponse<PolicyTemplateResponse> UpdatePolicyTemplateWithHttpInfo(string code, PolicyTemplateUpdateRequest? policyTemplateUpdateRequest = default(PolicyTemplateUpdateRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPolicyTemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template
        /// </summary>
        /// <remarks>
        /// Creates a Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyTemplateCreationRequest">The definition of the policy template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyTemplateResponse</returns>
        System.Threading.Tasks.Task<PolicyTemplateResponse> CreatePolicyTemplateAsync(PolicyTemplateCreationRequest policyTemplateCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template
        /// </summary>
        /// <remarks>
        /// Creates a Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyTemplateCreationRequest">The definition of the policy template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTemplateResponse>> CreatePolicyTemplateWithHttpInfoAsync(PolicyTemplateCreationRequest policyTemplateCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyTemplateAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template
        /// </summary>
        /// <remarks>
        /// Deletes an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyTemplateWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template
        /// </summary>
        /// <remarks>
        /// Generates policies from templates
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generatePolicyFromTemplateRequest">Definition of the generate request</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GeneratedPolicyComponents</returns>
        System.Threading.Tasks.Task<GeneratedPolicyComponents> GeneratePolicyFromTemplateAsync(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template
        /// </summary>
        /// <remarks>
        /// Generates policies from templates
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generatePolicyFromTemplateRequest">Definition of the generate request</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GeneratedPolicyComponents)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeneratedPolicyComponents>> GeneratePolicyFromTemplateWithHttpInfoAsync(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="asAt">Optional. The AsAt date time of the data. If not specified defaults to current time (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyTemplateResponse</returns>
        System.Threading.Tasks.Task<PolicyTemplateResponse> GetPolicyTemplateAsync(string code, DateTimeOffset? asAt = default(DateTimeOffset?), string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template
        /// </summary>
        /// <remarks>
        /// Gets an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="asAt">Optional. The AsAt date time of the data. If not specified defaults to current time (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTemplateResponse>> GetPolicyTemplateWithHttpInfoAsync(string code, DateTimeOffset? asAt = default(DateTimeOffset?), string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates
        /// </summary>
        /// <remarks>
        /// Gets all Policy Templates with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfPolicyTemplateResponse</returns>
        System.Threading.Tasks.Task<ResourceListOfPolicyTemplateResponse> ListPolicyTemplatesAsync(DateTimeOffset? asAt = default(DateTimeOffset?), string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates
        /// </summary>
        /// <remarks>
        /// Gets all Policy Templates with pagination support.
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfPolicyTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfPolicyTemplateResponse>> ListPolicyTemplatesWithHttpInfoAsync(DateTimeOffset? asAt = default(DateTimeOffset?), string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template
        /// </summary>
        /// <remarks>
        /// Updates an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the policy template to update</param>
        /// <param name="policyTemplateUpdateRequest">Definition of the updated policy template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyTemplateResponse</returns>
        System.Threading.Tasks.Task<PolicyTemplateResponse> UpdatePolicyTemplateAsync(string code, PolicyTemplateUpdateRequest? policyTemplateUpdateRequest = default(PolicyTemplateUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template
        /// </summary>
        /// <remarks>
        /// Updates an identified Policy Template
        /// </remarks>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the policy template to update</param>
        /// <param name="policyTemplateUpdateRequest">Definition of the updated policy template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTemplateResponse>> UpdatePolicyTemplateWithHttpInfoAsync(string code, PolicyTemplateUpdateRequest? policyTemplateUpdateRequest = default(PolicyTemplateUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPolicyTemplatesApi : IPolicyTemplatesApiSync, IPolicyTemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PolicyTemplatesApi : IPolicyTemplatesApi
    {
        private Finbourne.Access.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PolicyTemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PolicyTemplatesApi(string basePath)
        {
            this.Configuration = Finbourne.Access.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Access.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Access.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PolicyTemplatesApi(Finbourne.Access.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Access.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyTemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PolicyTemplatesApi(Finbourne.Access.Sdk.Client.ISynchronousClient client, Finbourne.Access.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Access.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Access.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Access.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Access.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Access.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template Creates a Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyTemplateCreationRequest">The definition of the policy template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PolicyTemplateResponse</returns>
        public PolicyTemplateResponse CreatePolicyTemplate(PolicyTemplateCreationRequest policyTemplateCreationRequest, int operationIndex = 0)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> localVarResponse = CreatePolicyTemplateWithHttpInfo(policyTemplateCreationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template Creates a Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyTemplateCreationRequest">The definition of the policy template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PolicyTemplateResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> CreatePolicyTemplateWithHttpInfo(PolicyTemplateCreationRequest policyTemplateCreationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'policyTemplateCreationRequest' is set
            if (policyTemplateCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyTemplateCreationRequest' when calling PolicyTemplatesApi->CreatePolicyTemplate");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = policyTemplateCreationRequest;

            localVarRequestOptions.Operation = "PolicyTemplatesApi.CreatePolicyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyTemplateResponse>("/api/policytemplates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template Creates a Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyTemplateCreationRequest">The definition of the policy template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyTemplateResponse</returns>
        public async System.Threading.Tasks.Task<PolicyTemplateResponse> CreatePolicyTemplateAsync(PolicyTemplateCreationRequest policyTemplateCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> localVarResponse = await CreatePolicyTemplateWithHttpInfoAsync(policyTemplateCreationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreatePolicyTemplate: Create a Policy Template Creates a Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyTemplateCreationRequest">The definition of the policy template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse>> CreatePolicyTemplateWithHttpInfoAsync(PolicyTemplateCreationRequest policyTemplateCreationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policyTemplateCreationRequest' is set
            if (policyTemplateCreationRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'policyTemplateCreationRequest' when calling PolicyTemplatesApi->CreatePolicyTemplate");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = policyTemplateCreationRequest;

            localVarRequestOptions.Operation = "PolicyTemplatesApi.CreatePolicyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PolicyTemplateResponse>("/api/policytemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template Deletes an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePolicyTemplate(string code, string? scope = default(string?), int operationIndex = 0)
        {
            DeletePolicyTemplateWithHttpInfo(code, scope);
        }

        /// <summary>
        /// [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template Deletes an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<Object> DeletePolicyTemplateWithHttpInfo(string code, string? scope = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PolicyTemplatesApi->DeletePolicyTemplate");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PolicyTemplatesApi.DeletePolicyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/policytemplates/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template Deletes an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyTemplateAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePolicyTemplateWithHttpInfoAsync(code, scope, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [EXPERIMENTAL] DeletePolicyTemplate: Deleting a policy template Deletes an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<Object>> DeletePolicyTemplateWithHttpInfoAsync(string code, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PolicyTemplatesApi->DeletePolicyTemplate");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PolicyTemplatesApi.DeletePolicyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/policytemplates/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template Generates policies from templates
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generatePolicyFromTemplateRequest">Definition of the generate request</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GeneratedPolicyComponents</returns>
        public GeneratedPolicyComponents GeneratePolicyFromTemplate(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<GeneratedPolicyComponents> localVarResponse = GeneratePolicyFromTemplateWithHttpInfo(generatePolicyFromTemplateRequest, asAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template Generates policies from templates
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generatePolicyFromTemplateRequest">Definition of the generate request</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GeneratedPolicyComponents</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<GeneratedPolicyComponents> GeneratePolicyFromTemplateWithHttpInfo(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0)
        {
            // verify the required parameter 'generatePolicyFromTemplateRequest' is set
            if (generatePolicyFromTemplateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'generatePolicyFromTemplateRequest' when calling PolicyTemplatesApi->GeneratePolicyFromTemplate");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }
            localVarRequestOptions.Data = generatePolicyFromTemplateRequest;

            localVarRequestOptions.Operation = "PolicyTemplatesApi.GeneratePolicyFromTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GeneratedPolicyComponents>("/api/policytemplates/$generatepolicy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePolicyFromTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template Generates policies from templates
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generatePolicyFromTemplateRequest">Definition of the generate request</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GeneratedPolicyComponents</returns>
        public async System.Threading.Tasks.Task<GeneratedPolicyComponents> GeneratePolicyFromTemplateAsync(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Access.Sdk.Client.ApiResponse<GeneratedPolicyComponents> localVarResponse = await GeneratePolicyFromTemplateWithHttpInfoAsync(generatePolicyFromTemplateRequest, asAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GeneratePolicyFromTemplate: Generate policy from template Generates policies from templates
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generatePolicyFromTemplateRequest">Definition of the generate request</param>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GeneratedPolicyComponents)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<GeneratedPolicyComponents>> GeneratePolicyFromTemplateWithHttpInfoAsync(GeneratePolicyFromTemplateRequest generatePolicyFromTemplateRequest, DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'generatePolicyFromTemplateRequest' is set
            if (generatePolicyFromTemplateRequest == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'generatePolicyFromTemplateRequest' when calling PolicyTemplatesApi->GeneratePolicyFromTemplate");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }
            localVarRequestOptions.Data = generatePolicyFromTemplateRequest;

            localVarRequestOptions.Operation = "PolicyTemplatesApi.GeneratePolicyFromTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GeneratedPolicyComponents>("/api/policytemplates/$generatepolicy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePolicyFromTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template Gets an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="asAt">Optional. The AsAt date time of the data. If not specified defaults to current time (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PolicyTemplateResponse</returns>
        public PolicyTemplateResponse GetPolicyTemplate(string code, DateTimeOffset? asAt = default(DateTimeOffset?), string? scope = default(string?), int operationIndex = 0)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> localVarResponse = GetPolicyTemplateWithHttpInfo(code, asAt, scope);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template Gets an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="asAt">Optional. The AsAt date time of the data. If not specified defaults to current time (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PolicyTemplateResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> GetPolicyTemplateWithHttpInfo(string code, DateTimeOffset? asAt = default(DateTimeOffset?), string? scope = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PolicyTemplatesApi->GetPolicyTemplate");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PolicyTemplatesApi.GetPolicyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PolicyTemplateResponse>("/api/policytemplates/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template Gets an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="asAt">Optional. The AsAt date time of the data. If not specified defaults to current time (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyTemplateResponse</returns>
        public async System.Threading.Tasks.Task<PolicyTemplateResponse> GetPolicyTemplateAsync(string code, DateTimeOffset? asAt = default(DateTimeOffset?), string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> localVarResponse = await GetPolicyTemplateWithHttpInfoAsync(code, asAt, scope, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetPolicyTemplate: Retrieving one Policy Template Gets an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code of the Policy Template</param>
        /// <param name="asAt">Optional. The AsAt date time of the data. If not specified defaults to current time (optional)</param>
        /// <param name="scope">Optional. Will use the default scope if not provided. The scope of the Policy Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse>> GetPolicyTemplateWithHttpInfoAsync(string code, DateTimeOffset? asAt = default(DateTimeOffset?), string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PolicyTemplatesApi->GetPolicyTemplate");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "PolicyTemplatesApi.GetPolicyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PolicyTemplateResponse>("/api/policytemplates/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates Gets all Policy Templates with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceListOfPolicyTemplateResponse</returns>
        public ResourceListOfPolicyTemplateResponse ListPolicyTemplates(DateTimeOffset? asAt = default(DateTimeOffset?), string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyTemplateResponse> localVarResponse = ListPolicyTemplatesWithHttpInfo(asAt, sortBy, limit, filter, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates Gets all Policy Templates with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceListOfPolicyTemplateResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyTemplateResponse> ListPolicyTemplatesWithHttpInfo(DateTimeOffset? asAt = default(DateTimeOffset?), string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0)
        {
            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "PolicyTemplatesApi.ListPolicyTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfPolicyTemplateResponse>("/api/policytemplates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPolicyTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates Gets all Policy Templates with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfPolicyTemplateResponse</returns>
        public async System.Threading.Tasks.Task<ResourceListOfPolicyTemplateResponse> ListPolicyTemplatesAsync(DateTimeOffset? asAt = default(DateTimeOffset?), string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyTemplateResponse> localVarResponse = await ListPolicyTemplatesWithHttpInfoAsync(asAt, sortBy, limit, filter, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListPolicyTemplates: List Policy Templates Gets all Policy Templates with pagination support.
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">Optional. The AsAt date time of the data (optional)</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Optional. Expression to filter the result set (optional)</param>
        /// <param name="page">Optional. Paging token returned from a previous result (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfPolicyTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<ResourceListOfPolicyTemplateResponse>> ListPolicyTemplatesWithHttpInfoAsync(DateTimeOffset? asAt = default(DateTimeOffset?), string? sortBy = default(string?), int? limit = default(int?), string? filter = default(string?), string? page = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Access.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "PolicyTemplatesApi.ListPolicyTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfPolicyTemplateResponse>("/api/policytemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPolicyTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template Updates an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the policy template to update</param>
        /// <param name="policyTemplateUpdateRequest">Definition of the updated policy template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PolicyTemplateResponse</returns>
        public PolicyTemplateResponse UpdatePolicyTemplate(string code, PolicyTemplateUpdateRequest? policyTemplateUpdateRequest = default(PolicyTemplateUpdateRequest?), int operationIndex = 0)
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> localVarResponse = UpdatePolicyTemplateWithHttpInfo(code, policyTemplateUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template Updates an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the policy template to update</param>
        /// <param name="policyTemplateUpdateRequest">Definition of the updated policy template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PolicyTemplateResponse</returns>
        public Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> UpdatePolicyTemplateWithHttpInfo(string code, PolicyTemplateUpdateRequest? policyTemplateUpdateRequest = default(PolicyTemplateUpdateRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PolicyTemplatesApi->UpdatePolicyTemplate");
            }

            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = policyTemplateUpdateRequest;

            localVarRequestOptions.Operation = "PolicyTemplatesApi.UpdatePolicyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PolicyTemplateResponse>("/api/policytemplates/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template Updates an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the policy template to update</param>
        /// <param name="policyTemplateUpdateRequest">Definition of the updated policy template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyTemplateResponse</returns>
        public async System.Threading.Tasks.Task<PolicyTemplateResponse> UpdatePolicyTemplateAsync(string code, PolicyTemplateUpdateRequest? policyTemplateUpdateRequest = default(PolicyTemplateUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse> localVarResponse = await UpdatePolicyTemplateWithHttpInfoAsync(code, policyTemplateUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdatePolicyTemplate: Update a Policy Template Updates an identified Policy Template
        /// </summary>
        /// <exception cref="Finbourne.Access.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the policy template to update</param>
        /// <param name="policyTemplateUpdateRequest">Definition of the updated policy template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Access.Sdk.Client.ApiResponse<PolicyTemplateResponse>> UpdatePolicyTemplateWithHttpInfoAsync(string code, PolicyTemplateUpdateRequest? policyTemplateUpdateRequest = default(PolicyTemplateUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Finbourne.Access.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling PolicyTemplatesApi->UpdatePolicyTemplate");
            }


            Finbourne.Access.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Access.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Finbourne.Access.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Finbourne.Access.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = policyTemplateUpdateRequest;

            localVarRequestOptions.Operation = "PolicyTemplatesApi.UpdatePolicyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PolicyTemplateResponse>("/api/policytemplates/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}