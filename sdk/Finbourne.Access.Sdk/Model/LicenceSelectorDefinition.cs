/* 
 * FINBOURNE Access Management API
 *
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1105
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Finbourne.Access.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Access.Sdk.Model
{
    /// <summary>
    /// Resource selector for identifying which resources a licence applies to
    /// </summary>
    [DataContract]
    public partial class LicenceSelectorDefinition :  IEquatable<LicenceSelectorDefinition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenceSelectorDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LicenceSelectorDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenceSelectorDefinition" /> class.
        /// </summary>
        /// <param name="code">The code of the licence (required).</param>
        /// <param name="actionIds">actionIds (required).</param>
        /// <param name="name">The name of this selector within the licence (for reporting and diagnostic purposes).</param>
        /// <param name="description">A description of the point of this selector within this licence.</param>
        public LicenceSelectorDefinition(string code = default(string), List<ActionId> actionIds = default(List<ActionId>), string name = default(string), string description = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for LicenceSelectorDefinition and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            
            // to ensure "actionIds" is required (not null)
            if (actionIds == null)
            {
                throw new InvalidDataException("actionIds is a required property for LicenceSelectorDefinition and cannot be null");
            }
            else
            {
                this.ActionIds = actionIds;
            }
            
            this.Name = name;
            this.Description = description;
            this.Name = name;
            this.Description = description;
        }
        
        /// <summary>
        /// The code of the licence
        /// </summary>
        /// <value>The code of the licence</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets ActionIds
        /// </summary>
        [DataMember(Name="actionIds", EmitDefaultValue=false)]
        public List<ActionId> ActionIds { get; set; }

        /// <summary>
        /// The name of this selector within the licence (for reporting and diagnostic purposes)
        /// </summary>
        /// <value>The name of this selector within the licence (for reporting and diagnostic purposes)</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the point of this selector within this licence
        /// </summary>
        /// <value>A description of the point of this selector within this licence</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenceSelectorDefinition {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ActionIds: ").Append(ActionIds).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenceSelectorDefinition);
        }

        /// <summary>
        /// Returns true if LicenceSelectorDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenceSelectorDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenceSelectorDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ActionIds == input.ActionIds ||
                    this.ActionIds != null &&
                    input.ActionIds != null &&
                    this.ActionIds.SequenceEqual(input.ActionIds)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ActionIds != null)
                    hashCode = hashCode * 59 + this.ActionIds.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }
    }

}
