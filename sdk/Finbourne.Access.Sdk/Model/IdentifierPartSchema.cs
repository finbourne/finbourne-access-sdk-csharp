/* 
 * FINBOURNE Access Management API
 *
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1085
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Finbourne.Access.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Access.Sdk.Model
{
    /// <summary>
    /// The schema of an contributing part of a valid LUSID resource identifier
    /// </summary>
    [DataContract]
    public partial class IdentifierPartSchema :  IEquatable<IdentifierPartSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierPartSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentifierPartSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierPartSchema" /> class.
        /// </summary>
        /// <param name="index">The typical index in the identifier in which this part appears (required).</param>
        /// <param name="name">The name of the identifier part that can/should be provided for this resource type (required).</param>
        /// <param name="displayName">The display name of the identifier part (required).</param>
        /// <param name="description">A brief description of the point of this identifier part (required).</param>
        /// <param name="required">Whether a value is required to be provided (required).</param>
        /// <param name="links">links.</param>
        public IdentifierPartSchema(int? index = default(int?), string name = default(string), string displayName = default(string), string description = default(string), bool? required = default(bool?), List<Link> links = default(List<Link>))
        {
            // to ensure "index" is required (not null)
            if (index == null)
            {
                throw new InvalidDataException("index is a required property for IdentifierPartSchema and cannot be null");
            }
            else
            {
                this.Index = index;
            }
            
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for IdentifierPartSchema and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for IdentifierPartSchema and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for IdentifierPartSchema and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            
            // to ensure "required" is required (not null)
            if (required == null)
            {
                throw new InvalidDataException("required is a required property for IdentifierPartSchema and cannot be null");
            }
            else
            {
                this.Required = required;
            }
            
            this.Links = links;
            this.Links = links;
        }
        
        /// <summary>
        /// The typical index in the identifier in which this part appears
        /// </summary>
        /// <value>The typical index in the identifier in which this part appears</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// The name of the identifier part that can/should be provided for this resource type
        /// </summary>
        /// <value>The name of the identifier part that can/should be provided for this resource type</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The display name of the identifier part
        /// </summary>
        /// <value>The display name of the identifier part</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A brief description of the point of this identifier part
        /// </summary>
        /// <value>A brief description of the point of this identifier part</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether a value is required to be provided
        /// </summary>
        /// <value>Whether a value is required to be provided</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentifierPartSchema {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentifierPartSchema);
        }

        /// <summary>
        /// Returns true if IdentifierPartSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentifierPartSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentifierPartSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }
    }

}
