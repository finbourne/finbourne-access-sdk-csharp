/* 
 * FINBOURNE Access Management API
 *
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1105
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Finbourne.Access.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Access.Sdk.Model
{
    /// <summary>
    /// Request to create a licence policy
    /// </summary>
    [DataContract]
    public partial class LicenceCreationRequest :  IEquatable<LicenceCreationRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenceCreationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LicenceCreationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenceCreationRequest" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="applications">applications (required).</param>
        /// <param name="selectors">selectors (required).</param>
        /// <param name="when">when (required).</param>
        /// <param name="_for">_for.</param>
        /// <param name="how">how.</param>
        /// <param name="_if">_if.</param>
        public LicenceCreationRequest(string code = default(string), string description = default(string), List<string> applications = default(List<string>), List<LicenceSelectorDefinition> selectors = default(List<LicenceSelectorDefinition>), WhenSpec when = default(WhenSpec), List<ForSpec> _for = default(List<ForSpec>), HowSpec how = default(HowSpec), List<IfExpression> _if = default(List<IfExpression>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for LicenceCreationRequest and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for LicenceCreationRequest and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            
            // to ensure "applications" is required (not null)
            if (applications == null)
            {
                throw new InvalidDataException("applications is a required property for LicenceCreationRequest and cannot be null");
            }
            else
            {
                this.Applications = applications;
            }
            
            // to ensure "selectors" is required (not null)
            if (selectors == null)
            {
                throw new InvalidDataException("selectors is a required property for LicenceCreationRequest and cannot be null");
            }
            else
            {
                this.Selectors = selectors;
            }
            
            // to ensure "when" is required (not null)
            if (when == null)
            {
                throw new InvalidDataException("when is a required property for LicenceCreationRequest and cannot be null");
            }
            else
            {
                this.When = when;
            }
            
            this.For = _for;
            this.If = _if;
            this.For = _for;
            this.How = how;
            this.If = _if;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Applications
        /// </summary>
        [DataMember(Name="applications", EmitDefaultValue=false)]
        public List<string> Applications { get; set; }

        /// <summary>
        /// Gets or Sets Selectors
        /// </summary>
        [DataMember(Name="selectors", EmitDefaultValue=false)]
        public List<LicenceSelectorDefinition> Selectors { get; set; }

        /// <summary>
        /// Gets or Sets When
        /// </summary>
        [DataMember(Name="when", EmitDefaultValue=false)]
        public WhenSpec When { get; set; }

        /// <summary>
        /// Gets or Sets For
        /// </summary>
        [DataMember(Name="for", EmitDefaultValue=true)]
        public List<ForSpec> For { get; set; }

        /// <summary>
        /// Gets or Sets How
        /// </summary>
        [DataMember(Name="how", EmitDefaultValue=false)]
        public HowSpec How { get; set; }

        /// <summary>
        /// Gets or Sets If
        /// </summary>
        [DataMember(Name="if", EmitDefaultValue=true)]
        public List<IfExpression> If { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenceCreationRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  Selectors: ").Append(Selectors).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  For: ").Append(For).Append("\n");
            sb.Append("  How: ").Append(How).Append("\n");
            sb.Append("  If: ").Append(If).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenceCreationRequest);
        }

        /// <summary>
        /// Returns true if LicenceCreationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenceCreationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenceCreationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Applications == input.Applications ||
                    this.Applications != null &&
                    input.Applications != null &&
                    this.Applications.SequenceEqual(input.Applications)
                ) && 
                (
                    this.Selectors == input.Selectors ||
                    this.Selectors != null &&
                    input.Selectors != null &&
                    this.Selectors.SequenceEqual(input.Selectors)
                ) && 
                (
                    this.When == input.When ||
                    (this.When != null &&
                    this.When.Equals(input.When))
                ) && 
                (
                    this.For == input.For ||
                    this.For != null &&
                    input.For != null &&
                    this.For.SequenceEqual(input.For)
                ) && 
                (
                    this.How == input.How ||
                    (this.How != null &&
                    this.How.Equals(input.How))
                ) && 
                (
                    this.If == input.If ||
                    this.If != null &&
                    input.If != null &&
                    this.If.SequenceEqual(input.If)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Applications != null)
                    hashCode = hashCode * 59 + this.Applications.GetHashCode();
                if (this.Selectors != null)
                    hashCode = hashCode * 59 + this.Selectors.GetHashCode();
                if (this.When != null)
                    hashCode = hashCode * 59 + this.When.GetHashCode();
                if (this.For != null)
                    hashCode = hashCode * 59 + this.For.GetHashCode();
                if (this.How != null)
                    hashCode = hashCode * 59 + this.How.GetHashCode();
                if (this.If != null)
                    hashCode = hashCode * 59 + this.If.GetHashCode();
                return hashCode;
            }
        }
    }

}
